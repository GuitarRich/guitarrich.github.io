<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sitecore Nuts &amp; Bolts</title>
    <link>http://www.sitecorenutsbolts.net/</link>
    <atom:link href="/atom.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to my blog. I have been a .Net developer for over 12 years, using Sitecore for the last 6. I am currently the Sitecore Practice Lead and Solutions Architect for Lightmaker and a dedicated Husband and Father to my wonderfull family!</description>
    <pubDate>Fri, 29 Jan 2021 16:02:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>TIHIDI: SXA Theme Deployment</title>
      <link>http://www.sitecorenutsbolts.net/2021/01/29/TIHIDI-SXA-Theme-Deployment/</link>
      <guid>http://www.sitecorenutsbolts.net/2021/01/29/TIHIDI-SXA-Theme-Deployment/</guid>
      <pubDate>Fri, 29 Jan 2021 16:02:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;With the release of SXA 10 the tooling around creating an SXA theme took a leap forward and added new functionality that made the develop
        
      
      </description>
      
      <content:encoded><![CDATA[<p>With the release of SXA 10 the tooling around creating an SXA theme took a leap forward and added new functionality that made the development and delivery of themes much better. No more fighting with the ASP.Net bundler to minify and concatenate your files, now we can pre-optimize the files before they get imported into Sitecore.</p><p>This gives us a number of advantages, but how do we deploy a theme now? Do we import it into a live site? What does the development workflow look like?</p><p>Well, there are a few options, but in this post, I’m going to talk about how we do it at <a href="https://www.perficient.com">Perficient</a>.</p><h3 id="Pre-Requisites"><a href="#Pre-Requisites" class="headerlink" title="Pre-Requisites"></a>Pre-Requisites</h3><p>Just a few caveates for this method. At <a href="https://www.perficient.com">Perficient</a>, we use <a href="https://github.com/SitecoreUnicorn/Unicorn">Unicorn</a> exclusively for item serialization. This method <em>could</em> work for Sitecore Content Serialization, _if_ Sitecore gets feature parity with Unicorn and adds things like Field level exclusions.</p><p>Also, we are using Azure DevOps pipelines for build and release, with some PowerShell commands and Git as our source control system. The principles for this method could be applied to other setups, but I will be focusing on our setup.</p><p>This solution also makes use of environment variables to denote whether the environment is for local dev or non-local dev.</p><h3 id="Source-Control-Setup"><a href="#Source-Control-Setup" class="headerlink" title="Source Control Setup"></a>Source Control Setup</h3><p>For the theme, there are 2 parts that we include in source control. First we have the static files, the SASS and JS files created by the SXA CLI. We make sure that any file that is generated by the CLI, e.g. all the CSS files, are excluded from source control. This helps prevent annoying merge conflicts and these files do not need source control anyway.</p><img src="/2021/01/29/TIHIDI-SXA-Theme-Deployment/themefiles.png" class=""><p>Secondly, we have the serialized Theme items. This includes all the items that are part of a theme, the fonts, images, CSS and JS items.</p><img src="/2021/01/29/TIHIDI-SXA-Theme-Deployment/themeunicornfiles.png" class="" title="Theme Static Files"><h3 id="Unicorn-Setup"><a href="#Unicorn-Setup" class="headerlink" title="Unicorn Setup"></a>Unicorn Setup</h3><p>The Unicorn setup is where this gets interesting, and a big thanks to <a href="https://twitter.com/cassidydotdk">Mark Cassidy</a> for all the feature additions and maintenance he has done on Unicorn since taking it over from Kam, even with SCS - Unicorn is still the best option for item serialization.</p><p>We have 2 configurations for the theme. It may seem overkill, but the reasons will become apparent.</p><p>The first configuration, is a basic always deploy configuration for the main theme files.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">name</span>=<span class="string">&quot;Project.MyTheme.Theme&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">description</span>=<span class="string">&quot;Main theme scaffolding items&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">extends</span>=<span class="string">&quot;Helix&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">dependencies</span>=<span class="string">&quot;Foundation.Serialization&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">patch:after</span>=<span class="string">&quot;configuration[@name=&#x27;Foundation.Serialization&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">targetDataStore</span> <span class="attr">physicalRootPath</span>=<span class="string">&quot;$(sourceFolder)\$(layer)\$(module)\serialization\theme&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">predicate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;Theme&quot;</span> <span class="attr">database</span>=<span class="string">&quot;master&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/sitecore/media library/Themes/Tenant/MyTheme&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">path</span>=<span class="string">&quot;MyTheme/styles/pre-optimized-min&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">path</span>=<span class="string">&quot;MyTheme/Scripts/pre-optimized-min&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">predicate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Notice that we are excluding the <code>pre-optimized-min</code> files for both CSS and JS here.</p><p>The second configuration has the magic:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">name</span>=<span class="string">&quot;Project.MyTheme.Theme.FED.Placeholders&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">description</span>=<span class="string">&quot;Placeholders for files which are populated from FED folder&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">extends</span>=<span class="string">&quot;Helix&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">dependencies</span>=<span class="string">&quot;Project.MyTheme.Theme&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">patch:after</span>=<span class="string">&quot;configuration[@name=&#x27;Foundation.Serialization&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">targetDataStore</span> <span class="attr">physicalRootPath</span>=<span class="string">&quot;$(sourceFolder)\$(layer)\$(module)\serialization\fed.placeholder&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">predicate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;Scripts&quot;</span> <span class="attr">database</span>=<span class="string">&quot;master&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/sitecore/media library/Themes/Tenant/MyTheme/MyTheme/Scripts/pre-optimized-min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;Styles&quot;</span> <span class="attr">database</span>=<span class="string">&quot;master&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/sitecore/media library/Themes/Tenant/MyTheme/MyTheme/styles/pre-optimized-min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">predicate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldFilter</span> <span class="attr">type</span>=<span class="string">&quot;Rainbow.Filtering.ConfigurationFieldFilter, Rainbow&quot;</span> <span class="attr">singleInstance</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;40E50ED9-BA07-4702-992E-A912738D32DC&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;Blob&#x27; field on /sitecore/templates/System/Media/Unversioned/File template &quot;</span> <span class="attr">env:require</span>=<span class="string">&quot;Local&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;6954B7C7-2487-423F-8600-436CB3B6DC0E&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;Size&#x27; field on /sitecore/templates/System/Media/Unversioned/File&quot;</span> <span class="attr">env:require</span>=<span class="string">&quot;Local&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;B1E16562-F3F9-4DDD-84CA-6E099950ECC0&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;Last run&#x27; field on Schedule template (used to register tasks)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;52807595-0F8F-4B20-8D2A-CB71D28C6103&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;__Owner&#x27; field on Standard Template&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;8CDC337E-A112-42FB-BBB4-4143751E123F&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;__Revision&#x27; field on Standard Template&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;D9CF14B1-FA16-4BA6-9288-E8A174D4D522&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;__Updated&#x27; field on Standard Template&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;__Updated by&#x27; field on Standard Template&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">fieldID</span>=<span class="string">&quot;&#123;001DD393-96C5-490B-924A-B0F25CD9EFD8&#125;&quot;</span> <span class="attr">note</span>=<span class="string">&quot;&#x27;__Lock&#x27; field on Standard Template&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldFilter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The field filter is what helps us out here. We are serializing the <code>pre-optimized-min</code> JS and CSS files, but <em>excluding</em> the <code>Blob</code> and <code>Size</code> fields. Notice that those field filters have <code>env:require=&quot;Local&quot;</code>, this means that these fields will only be excluded for local development. When this is deployed to the upper environments - dev/qa/stage/production etc… these fields will be included in any sync tasks.</p><p>What this gives us locally is a way to serialize the theme and prepare it for deployment, without having to worry about merge conflicts caused by the base64 encoded blob data in the <code>pre-optimized</code> items being updated when the themes are updated during development.</p><p>You <em>could</em> do all this with a single theme serialization config, but everytime a developer imported the latest theme, it would update the values in source control and becuase the <code>blob</code> data is a base64 encoded string, it will cause merge conflicts a lot. To get around that, your developers could just ignore changes to that file, but that relies on developers having a good memory… and I would forget frequently! Having the field filter just makes the process seamless and means there isn’t anything extra for developers to do day to day.</p><h3 id="The-final-piece…-Build-and-Deploy-scripts"><a href="#The-final-piece…-Build-and-Deploy-scripts" class="headerlink" title="The final piece…. Build and Deploy scripts"></a>The final piece…. Build and Deploy scripts</h3><p>To tie this all together, we use the build and deploy scripts in the <code>azure-pipelines.yml</code> file. First we need to make sure the theme is built using the SXA CLI. We could use the NPM tasks in in the azure pipelines, but its easier to just use a PowerShell script to do it:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PowerShell@2</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">and(eq(variables[&#x27;Build.SourceBranch&#x27;],</span> <span class="string">&#x27;refs/heads/master&#x27;</span><span class="string">),</span> <span class="string">not(canceled()))</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&quot;Run Creative Exchange tasks&quot;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">filePath:</span> <span class="string">&#x27;$(Build.SourcesDirectory)\scripts\Invoke-ThemeOptimization.ps1&#x27;</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;-BuildSourcesDirectory $(Build.SourcesDirectory) -ProjectPaths \src\Project\Site1\,\src\Project\Site2\,\src\Project\Site3\&#x27;</span></span><br></pre></td></tr></table></figure><p>This is the task, notice that we can use this to build multiple themes if we are a multi-site implementation. Just pass in the path to the static theme files for each sites theme you want to build.</p><p>Once we have built the theme into the <code>pre-optimized-min</code> CSS and JS files, we can use those files to populate the <code>Blob</code> and <code>Size</code> fields in the serialized <code>scripts\pre-optimized-min.yml</code> and <code>styles\pre-optimized-min.yml</code>. This effectively gives us a complete serialized file ready to be sync’d as part of the deployment process. This script assumes that your theme and theme serialization folders are at the same level.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">param</span> (</span><br><span class="line">    [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>] <span class="variable">$BuildSourcesDirectory</span> = <span class="string">&quot;C:\Projects\Sitecore9x\&quot;</span>,</span><br><span class="line">    [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>[]] <span class="variable">$ProjectPaths</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetThemeYml</span></span>&#123;</span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">    [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>]<span class="variable">$themeFolder</span>,</span><br><span class="line">    [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>]<span class="variable">$ymlFolder</span>,</span><br><span class="line">    [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>]<span class="variable">$sourceFile</span></span><br><span class="line">)   </span><br><span class="line">    &amp; <span class="string">&quot;<span class="variable">$BuildSourcesDirectory</span>\src\Azure\Navistar.Deployment\Set-ThemeYaml.ps1&quot;</span> <span class="literal">-SourceFile</span> <span class="string">&quot;<span class="variable">$themeFolder</span>\<span class="variable">$sourceFile</span>&quot;</span> <span class="literal">-DestFile</span> <span class="string">&quot;<span class="variable">$ymlFolder</span>\pre-optimized-min.yml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only need to install the global SXA CLI once.</span></span><br><span class="line">npm config <span class="built_in">set</span> @sxa:registry=https://sitecore.myget.org/F/<span class="built_in">sc</span><span class="literal">-npm</span><span class="literal">-packages</span>/npm/</span><br><span class="line">npm install <span class="literal">-g</span> @sxa/<span class="built_in">CLI</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$projectPath</span> <span class="keyword">in</span> <span class="variable">$ProjectPaths</span>)&#123;</span><br><span class="line">    <span class="variable">$projectPath</span> = <span class="variable">$BuildSourcesDirectory</span> + <span class="variable">$projectPath</span></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;`r`nStarting Optimization for: <span class="variable">$projectPath</span>&quot;</span></span><br><span class="line">   </span><br><span class="line">    [<span class="built_in">string</span>]<span class="variable">$ThemeFolder</span>=<span class="built_in">Get-ChildItem</span> <span class="literal">-Filter</span> <span class="string">&quot;gulpfile.js&quot;</span> <span class="literal">-Path</span> <span class="string">&quot;<span class="variable">$projectPath</span>\theme&quot;</span> | <span class="built_in">Select-Object</span> <span class="literal">-ExpandProperty</span> DirectoryName <span class="literal">-Unique</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$null</span> <span class="operator">-eq</span> <span class="variable">$ThemeFolder</span> <span class="operator">-Or</span> <span class="variable">$ThemeFolder</span> <span class="operator">-eq</span> <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">Write-Warning</span> <span class="string">&quot;SXA 10 Theme not found for directory: <span class="variable">$projectPath</span>&quot;</span></span><br><span class="line">        <span class="built_in">Write-Warning</span> <span class="string">&quot;Exited Optimization for: <span class="variable">$projectPath</span>&quot;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    [<span class="type">System.Collections.ArrayList</span>]<span class="variable">$ymlFolders</span>=<span class="built_in">Get-ChildItem</span> <span class="literal">-Filter</span> <span class="string">&quot;pre-optimized-min.yml&quot;</span> <span class="literal">-Path</span> <span class="string">&quot;<span class="variable">$projectPath</span>\serialization&quot;</span> <span class="literal">-Recurse</span> | <span class="built_in">Select-Object</span> <span class="literal">-ExpandProperty</span> DirectoryName <span class="literal">-Unique</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$null</span> <span class="operator">-eq</span> <span class="variable">$ymlFolders</span> <span class="operator">-Or</span> <span class="variable">$ymlFolders</span>.Count <span class="operator">-eq</span> <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">Write-Warning</span> <span class="string">&quot;Destination YML files not found for directory: <span class="variable">$projectPath</span>&quot;</span></span><br><span class="line">        <span class="built_in">Write-Warning</span> <span class="string">&quot;Exited Optimization for: <span class="variable">$projectPath</span>&quot;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Set-Location</span> <span class="variable">$ThemeFolder</span></span><br><span class="line"></span><br><span class="line">    npm install</span><br><span class="line">    sxa build SassStyles -<span class="literal">-debug</span></span><br><span class="line">    sxa build All -<span class="literal">-debug</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$scriptFolder</span> = <span class="variable">$ymlFolders</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.ToUpper().Contains(<span class="string">&quot;SCRIPTS&quot;</span>)  &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$null</span> <span class="operator">-ne</span> <span class="variable">$scriptFolder</span> <span class="operator">-and</span> <span class="variable">$scriptFolder</span> <span class="operator">-ne</span> <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SetThemeYml <span class="literal">-themeFolder</span> <span class="variable">$ThemeFolder</span> <span class="literal">-ymlFolder</span> <span class="variable">$scriptFolder</span> <span class="literal">-sourceFile</span> <span class="string">&#x27;scripts\pre-optimized-min.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">Write-Warning</span> <span class="string">&quot;Script Optimization Failed&quot;</span></span><br><span class="line">            <span class="built_in">Write-Warning</span> <span class="variable">$_</span>.Exception.Message</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$stylesFolder</span> = <span class="variable">$ymlFolders</span> | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.ToUpper().Contains(<span class="string">&quot;STYLES&quot;</span>)  &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$null</span> <span class="operator">-ne</span> <span class="variable">$stylesFolder</span> <span class="operator">-and</span> <span class="variable">$stylesFolder</span> <span class="operator">-ne</span> <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SetThemeYml <span class="literal">-themeFolder</span> <span class="variable">$ThemeFolder</span> <span class="literal">-ymlFolder</span> <span class="variable">$stylesFolder</span> <span class="literal">-sourceFile</span> <span class="string">&#x27;styles\pre-optimized-min.css&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">Write-Warning</span> <span class="string">&quot;Style Optimization Failed&quot;</span></span><br><span class="line">            <span class="built_in">Write-Warning</span> <span class="variable">$_</span>.Exception.Message</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;`r`nFinished Optimization for: <span class="variable">$projectPath</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-Location</span>  <span class="variable">$</span>&#123;PSScriptRoot&#125;</span><br></pre></td></tr></table></figure><p>And now for the magic…. your deployment process doesn’t change. Assuming you already have release steps in place to sync Unicorn when you deploy your CM instance, this will automatically deploy your CSS and JS pre-optimized theme, nothing else to do!</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>This process may initially seem a bit daunting, but when you look at the implementation, its actually pretty simple and once it is setup it doesn’t take any effort to maintain. Its easy to apply to multiple projects and makes deploying the theme to QA/Stage and Production sites a breeze.</p><p>A big thanks to (Ben Lipson)[<a href="https://twitter.com/bllipson]">https://twitter.com/bllipson]</a> for working out some of the implementation details around the Field filters.</p><ul><li>Richard</li></ul>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2021/01/29/TIHIDI-SXA-Theme-Deployment/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rendering Links with Scriban</title>
      <link>http://www.sitecorenutsbolts.net/2020/05/13/Rendering-Links-with-Scriban/</link>
      <guid>http://www.sitecorenutsbolts.net/2020/05/13/Rendering-Links-with-Scriban/</guid>
      <pubDate>Wed, 13 May 2020 21:02:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Rendering a &lt;code&gt;General Link&lt;/code&gt; in Sitecore MVC is pretty simple using the &lt;code&gt;FieldRenderer&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Rendering a <code>General Link</code> in Sitecore MVC is pretty simple using the <code>FieldRenderer</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    @Html.Sitecore().Field(&quot;LinkField&quot;)</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>It uses the attributes of the <code>General Link</code> field to create an <code>&lt;a&gt;</code> tag as a text link. But what if you want to use something more complex, like an image as the link or an entire promo card?</p><p>In MVC that is still pretty simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    @Html.Sitecore().BeginField(&quot;LinkField&quot;)</span><br><span class="line">    @Html.Sitecore().Field(&quot;ImageField&quot;)</span><br><span class="line">    @Html.Sitecore().EndField()</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    @Html.Sitecore().Field(&quot;Link&quot;, new &#123;text &#x3D; @Html.Sitecore().Field(&quot;Image&quot;)&#125;)</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="Its-tricky-with-Scriban"><a href="#Its-tricky-with-Scriban" class="headerlink" title="Its tricky with Scriban"></a>Its tricky with Scriban</h2><p>But with SXA and Scriban rendering variants, it becomes a little more tricky to do that. With Scriban we have the <code>sc_link</code> object along with the standard field renderer. So there are a few ways to render a standard text link:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- Standard field render using the item object --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;field-promolink&quot;&gt;</span><br><span class="line">    &#123;&#123; i_item.PromoLink &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Using the sc_link object --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;field-promolink&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;&#123; sc_link i_item &#125;&#125;&quot;&gt;&#123;&#123; i_item.display_name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>Using the <code>sc_link</code> object we can even add an image to the link:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;field-promolink&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;&#123; sc_link i_item &#125;&#125;&quot;&gt;&#123;&#123; i_item.ImageField &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>But that does limit what a content editor can do with a <code>General Link</code> field. It only uses the url attribute of the field and ignores things like the target, css class names, title text for ADA compliance etc… It also doesn’t allow for things like anchor links or email links etc…</p><p>What we really need is a <code>BeginField</code> and <code>EndField</code> options for Scriban. Fortunately, this is Sitecore and as with most things in Sitecore, we can add that!</p><h2 id="Adding-the-Processor"><a href="#Adding-the-Processor" class="headerlink" title="Adding the Processor"></a>Adding the Processor</h2><p>For the processor, we need to add 2 new functions to scriban, <code>sc_beginfield</code> and <code>sc_endfield</code>. <code>sc_endfield</code> is going to be very simple, no parameters will be passed to it. But <code>sc_beginfield</code> will need to have the same setup as the <code>sc_field</code> function that is out of the box. So let’s start by looking at that processor and creating the customisation there. To add a customization we have to implement <code>IGenerateScribanContextProcessor</code>, but also we want to derive our class from <code>FieldRendererBase</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BeginEndFieldProcessor</span> : <span class="title">FieldRendererBase</span>, <span class="title">IGenerateScribanContextProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IPageMode PageMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IScribanRenderCache _scribanRenderCache;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">BeginRenderDelegate</span>(<span class="params">Item item, <span class="built_in">object</span> fieldName, ScriptArray parameters</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">EndRenderDelegate</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeginEndFieldProcessor</span>(<span class="params">IPageMode pageMode, IScribanRenderCache scribanRenderCache</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        PageMode = pageMode;</span><br><span class="line">        _scribanRenderCache = scribanRenderCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">GenerateScribanContextPipelineArgs args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        RenderingWebEditingParams = args.RenderingWebEditingParams;</span><br><span class="line">        args.GlobalScriptObject.Import(<span class="string">&quot;sc_beginfield&quot;</span>, <span class="keyword">new</span> BeginRenderDelegate(BeginRenderImpl));</span><br><span class="line">        args.GlobalScriptObject.Import(<span class="string">&quot;sc_endfield&quot;</span>, <span class="keyword">new</span> EndRenderDelegate(EndRenderImpl));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">BeginRenderImpl</span>(<span class="params">Item item, <span class="built_in">object</span> field, ScriptArray parameters</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> parametersCollection = <span class="keyword">new</span> NameValueCollection();</span><br><span class="line">        <span class="keyword">if</span> (parameters != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">object</span> parameter <span class="keyword">in</span> parameters)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (parameter <span class="keyword">is</span> ScriptArray scriptArray &amp;&amp; scriptArray.Count &gt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    parametersCollection.Add(scriptArray[<span class="number">0</span>].ToString(), scriptArray[<span class="number">1</span>].ToString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> fieldName = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (field)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">string</span> fieldString:</span><br><span class="line">                fieldName = fieldString;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> ScriptArray array:</span><br><span class="line">                <span class="keyword">using</span> (List&lt;<span class="built_in">object</span>&gt;.Enumerator enumerator = array.GetEnumerator())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span> (enumerator.MoveNext())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (enumerator.Current <span class="keyword">is</span> <span class="built_in">string</span> current)</span><br><span class="line">                        &#123;</span><br><span class="line">                            fieldName = fieldName ?? current;</span><br><span class="line">                            <span class="built_in">bool</span> experienceEditorEditing = PageMode.IsExperienceEditorEditing;</span><br><span class="line">                            Field currentField = item.Fields[current];</span><br><span class="line">                            <span class="keyword">if</span> (currentField != <span class="literal">null</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (experienceEditorEditing)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    fieldName = current;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (!IsNullOrWhiteSpace(currentField.GetValue(<span class="literal">true</span>)))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    fieldName = current;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RenderFieldResult fieldRenderer = CreateFieldRenderer(item, fieldName, parametersCollection).RenderField();</span><br><span class="line">        _scribanRenderCache.PushEndFieldStack(fieldRenderer.LastPart ?? Empty);</span><br><span class="line">        <span class="keyword">return</span> fieldRenderer.FirstPart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">EndRenderImpl</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _scribanRenderCache.PopEndFieldStack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So lets break that down. First we are creating 2 functions for the implementation of the 2 scriban functions and we are registering them with the <code>args.GlobalScriptObject</code>.</p><p>The <code>BeginRenderImpl</code> implementation is mostly a copy of the <code>AddFieldRendererFunction.RenderFieldImpl</code> that adds the <code>sc_field</code> function to Scriban. This uses the item, field and parameters array to create a new <code>FieldRenderer</code> object:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RenderFieldResult fieldRenderer = CreateFieldRenderer(item, fieldName, parametersCollection).RenderField();</span><br></pre></td></tr></table></figure><p>In the original, it just returns the <code>.Result()</code> of that, which contains the entire rendered out content. But we only want to return the <code>.FirstPart</code> in this call. But we also need to store the <code>.LastPart</code> so that when we call <code>sc_endfield</code>, it renders the correct closing tags for the field we are rendering.</p><p>To do this I added and <code>IScribanRenderingCache</code> that is registered with the container as a <code>Scoped</code> object. This internally contains a stack that we can push the results of <code>.LastPart</code> onto, now when we call <code>sc_endfield</code>, that will pop the stack and get the corresponding closing tag. Using a stack means we can also nest <code>sc_beginfield</code> if we needed to, the call to <code>sc_endfield</code> will always provide the correct closing tag.</p><h2 id="Using-the-Functions-in-a-Scriban-Template"><a href="#Using-the-Functions-in-a-Scriban-Template" class="headerlink" title="Using the Functions in a Scriban Template"></a>Using the Functions in a Scriban Template</h2><p>So how do we use these? Lets say we just want a simple Image Field rendered as the contents of an <code>&lt;a&gt;</code> tag:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; sc_beginrender i_item <span class="string">&#x27;Link&#x27;</span> [[<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27; &#x27;</span>]]&#125;&#125;</span><br><span class="line">    &#123;&#123; sc_field i_item <span class="string">&#x27;Image&#x27;</span>  &#125;&#125;</span><br><span class="line">&#123;&#123; sc_endrender &#125;&#125;</span><br></pre></td></tr></table></figure><p>will render as:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/url/set/in/field&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Alt text from general link attributes&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/-/media/myimage.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>What about something more complex?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; sc_beginrender i_item <span class="string">&#x27;Link&#x27;</span> [[<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;font-uppercase font-bold&#x27;</span>], [<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27; &#x27;</span>]]&#125;&#125;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;font-icon &#123;&#123; sc_raw i_item.Icon.target &#x27;Value&#x27; &#125;&#125;&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">    &lt;h5&gt;&#123;&#123; sc_link_text i_item <span class="string">&#x27;Link&#x27;</span> &#125;&#125; &lt;/h5&gt;</span><br><span class="line">&#123;&#123; sc_endrender &#125;&#125;</span><br></pre></td></tr></table></figure><p>will render as:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/url/set/in/field&quot;</span> <span class="attr">class</span>=<span class="string">&quot;font-uppercase font-bold&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Alt text from general link attributes&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;font-icon fa fa-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>The Link Description<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Notice that we can still pass in all the attributes to the <code>sc_beginrender</code> that you can with <code>sc_field</code>. You may also notice that we have passed in <code>[&#39;text&#39;, &#39; &#39;]</code> as an attribute. This tells the <code>FieldRenderer</code> to ignore the value set in the <code>Description</code> attribute of the general link. It replaces it with a space. If we leave that out, the first example would render as:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/url/set/in/field&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Alt text from general link attributes&quot;</span>&gt;</span>Link Description</span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/-/media/myimage.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This doesn’t just work with link fields either, it works with anything that can be rendered through the <code>FieldRenderer</code>, the actual outcome will depend on the field type used, YMMV.</p><h2 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl/dr;"></a>tl/dr;</h2><p>Get the code here: <a href="https://github.com/GuitarRich/sxa-modules">https://github.com/GuitarRich/sxa-modules</a> </p><p>Enjoy</p><ul><li>Richard Seal</li></ul><p>References:</p><ul><li><a href="https://doc.sitecore.com/developers/sxa/93/sitecore-experience-accelerator/en/the-embedded-functions-for-the-scriban-template.html#idm45208463571696_body">The embedded functions for the Scriban template</a></li></ul>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2020/05/13/Rendering-Links-with-Scriban/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore Docker: Making Those Urls Pretty</title>
      <link>http://www.sitecorenutsbolts.net/2020/02/19/Sitecore-Docker-Making-Those-Urls-Pretty/</link>
      <guid>http://www.sitecorenutsbolts.net/2020/02/19/Sitecore-Docker-Making-Those-Urls-Pretty/</guid>
      <pubDate>Wed, 19 Feb 2020 14:13:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Containers-Containers-Containers&quot;&gt;&lt;a href=&quot;#Containers-Containers-Containers&quot; class=&quot;headerlink&quot; title=&quot;Containers, Containers, Cont
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Containers-Containers-Containers"><a href="#Containers-Containers-Containers" class="headerlink" title="Containers, Containers, Containers!"></a>Containers, Containers, Containers!</h3><img src="/2020/02/19/Sitecore-Docker-Making-Those-Urls-Pretty/containerseverywhere.jpg" class=""><p>Getting Sitecore running on containers using Docker seems to be the current craze/buzzword. It’s really gaining traction, but unlike a lot of fads, frameworks and buzzwords, this one actually is useful!</p><p>This blog post is not going to give you any tutorials or how-to’s on setting up Sitecore on Docker. Some people far cleverer than I have already done that. If you want a simple no frills intro, you can’t get much better than <a href="https://intothecloud.blog/">Mark Cassidy’s</a> series:</p><ul><li><a href="https://intothecloud.blog/2019/09/14/Sitecore-Docker-for-Dummies/">Docker for Dummies - Docker 101  or Docker Basics</a></li><li><a href="https://intothecloud.blog/2019/09/16/Setting-up-Sitecore-Docker-Images/">Docker for Dummies - Setting up Sitecore Docker images</a></li><li><a href="https://intothecloud.blog/2019/09/21/Deploying-and-Debugging-Your-Visual-Studio-Solution-to-Your-Sitecore-Docker-Containers/">Docker for Dummies - Deploying &amp; Debugging Visual Studio Solutions</a></li></ul><h3 id="So-What’s-with-the-Urls-Then"><a href="#So-What’s-with-the-Urls-Then" class="headerlink" title="So What’s with the Urls Then?"></a>So What’s with the Urls Then?</h3><p>Getting Sitecore running on Docker, turns out to be pretty simple. Follow the steps in the articles above and soon you’ll be loading up <code>http://localhost:44001</code> or <code>http://localhost:44002</code> in your browser. From this point, I’ll assume you have managed to get Sitecore running in Docker on your local machine.</p><p>But here is where my problems started. First, if you are developing a multisite solution, <code>localhost</code> isn’t going to cut it for long. As soon as you need a second site, you need domain names. Also, if you are working on multple client projects, <code>localhost</code> can get hard to keep track. Sure, you might only be running containers for one client at a time, but in the CM, it would be nice to have a quick glance at the url to remind yourself which project/client you are on. You might run multiple containers at once. Finally, I just don’t like having to put the port number in the url. Yes, its just asthetics, and yes it does make me one of “those” people! But it is what it is, the port number is ugly - I like having pretty urls!</p><p>One more thing that I like to have for local development, is my sites running under SSL. That might seem overkill, and I agree 90% of the time it is. But I’ve seen too many bugs make it into the codebase because everything was tested on HTTP locally and then broke as soon as the protocol changed. Both via the <code>LinkManager</code> screwing things up, and by lazy developers doing silly things like hard coding the protocol! (insert your fav Picard face palm gif here!), and yes I agree that these are things that <em>shouldn’t</em> happen, we have all seen stupid issues like that. So I like to be in a position to test those kind of things before pushing the code out to QA.</p><h3 id="THIDI-Fixing-the-Url’s"><a href="#THIDI-Fixing-the-Url’s" class="headerlink" title="THIDI: Fixing the Url’s"></a>THIDI: Fixing the Url’s</h3><p>There are a few different approaches to “fixing” the urls for Docker to look pretty. <a href="">Michael West</a> has a <a href="https://github.com/michaellwest/docker-https">Docker Repo</a> that solves this using a <code>startup.ps1</code> PowerShell script that will modify the hosts file in the container, using a nifty little script by <a href="https://github.com/RAhnemann/windows-hosts-writer">Rob Ahnemann</a>.</p><p>My approach was slightly different. I ended up using IIS as a reverse proxy to the Docker containers. I had played around with other reverse proxies like <a href="https://containo.us/traefik/">Traefik</a>. But to have those monitoring port 80, it meant that IIS had to be turned off. As not all of our projects are containerized yet, this is not an option.</p><p>But getting IIS to act as a reverse proxy is pretty simple.</p><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><p>First, we need to make sure that we have the following modules installed. These can be installed by the Web Platform Installer:</p><ul><li>Url Rewrite v2.1 or higher</li><li>Application Request Routing v3 or higher</li></ul><p>Once installed, you get a new icon in IIS when you click on the server. <strong>Application Request Routing Cache</strong>. First thing to do is fire up IIS, open up the <code>Application Requet Routing Cache</code> and then click <code>Server Proxy Settings</code>:</p><img src="/2020/02/19/Sitecore-Docker-Making-Those-Urls-Pretty/serverproxysettings.png" class=""><p>Now tick the checkbox to enable reverse proxies:</p><img src="/2020/02/19/Sitecore-Docker-Making-Those-Urls-Pretty/enablerp.png" class=""><h4 id="Docker-Compose-Modifications"><a href="#Docker-Compose-Modifications" class="headerlink" title="Docker Compose Modifications"></a>Docker Compose Modifications</h4><p>Now we have the basic setup in IIS. Its time to setup the <code>docker-compose.yml</code> file. I’ll just show the relavent parts here:</p><p>At the bottom of the file, make sure you have your networks configured:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nat</span></span><br></pre></td></tr></table></figure><p>Now for the CD and CM, you can add aliases:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cm:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">$&#123;REGISTRY&#125;sitecore-xp-sxa-standalone:$&#123;SITECORE_VERSION&#125;-windowsservercore-$&#123;WINDOWSSERVERCORE_VERSION&#125;</span></span><br><span class="line">  <span class="attr">entrypoint:</span> <span class="string">powershell.exe</span> <span class="string">-Command</span> <span class="string">&quot;&amp; C:\\tools\\entrypoints\\iis\\Development.ps1&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.\startup:C:\startup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">..\build\Debug:C:\src</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">..\src:C:\inetpub\wwwroot\app_data\unicorn</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;44001:80&quot;</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">aliases:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">myproject-cm.dev.local</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">HOST_HEADER:</span> <span class="string">myproject-cm.dev.local</span></span><br><span class="line">    <span class="attr">SITECORE_LICENSE:</span> <span class="string">$&#123;SITECORE_LICENSE&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_APPSETTINGS_ROLE:DEFINE:</span> <span class="string">Standalone</span></span><br><span class="line">    <span class="attr">SITECORE_APPSETTINGS_SXAXM:DEFINE:</span> <span class="string">sxaxconnect</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_CORE:</span> <span class="string">Data</span> <span class="string">Source=sql;Initial</span> <span class="string">Catalog=Sitecore.Core;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_SECURITY:</span> <span class="string">Data</span> <span class="string">Source=sql;Initial</span> <span class="string">Catalog=Sitecore.Core;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_MASTER:</span> <span class="string">Data</span> <span class="string">Source=sql;Initial</span> <span class="string">Catalog=Sitecore.Master;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_WEB:</span> <span class="string">Data</span> <span class="string">Source=sql;Initial</span> <span class="string">Catalog=Sitecore.Web;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_EXPERIENCEFORMS:</span> <span class="string">Data</span> <span class="string">Source=sql;Initial</span> <span class="string">Catalog=Sitecore.ExperienceForms;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_SOLR.SEARCH:</span> <span class="string">http://solr:8983/solr</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_MESSAGING:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.Messaging;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.MARKETINGAUTOMATION:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.MarketingAutomation;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.PROCESSING.POOLS:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.Processing.Pools;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.REFERENCEDATA:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.ReferenceData;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.PROCESSING.TASKS:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.Processing.Tasks;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_EXM.MASTER:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.EXM.Master;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_REPORTING:</span> <span class="string">Data</span> <span class="string">Source=sql;Database=Sitecore.Reporting;User</span> <span class="string">ID=sa;Password=$&#123;SQL_SA_PASSWORD&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_SITECORE.REPORTING.CLIENT:</span> <span class="string">http://xconnect</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XCONNECT.COLLECTION:</span> <span class="string">http://xconnect</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.MARKETINGAUTOMATION.OPERATIONS.CLIENT:</span> <span class="string">http://xconnect</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.MARKETINGAUTOMATION.REPORTING.CLIENT:</span> <span class="string">http://xconnect</span></span><br><span class="line">    <span class="attr">SITECORE_CONNECTIONSTRINGS_XDB.REFERENCEDATA.CLIENT:</span> <span class="string">http://xconnect</span></span><br><span class="line">    <span class="attr">SITECORE_APPSETTINGS_TELERIK.ASYNCUPLOAD.CONFIGURATIONENCRYPTIONKEY:</span> <span class="string">$&#123;TELERIK_ENCRYPTION_KEY&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_APPSETTINGS_TELERIK.UPLOAD.CONFIGURATIONHASHKEY:</span> <span class="string">$&#123;TELERIK_ENCRYPTION_KEY&#125;</span></span><br><span class="line">    <span class="attr">SITECORE_APPSETTINGS_TELERIK.WEB.UI.DIALOGPARAMETERSENCRYPTIONKEY:</span> <span class="string">$&#123;TELERIK_ENCRYPTION_KEY&#125;</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">solr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xconnect</span></span><br></pre></td></tr></table></figure><h4 id="Configure-the-Reverse-Proxy"><a href="#Configure-the-Reverse-Proxy" class="headerlink" title="Configure the Reverse Proxy"></a>Configure the Reverse Proxy</h4><p>To setup the Reverse Proxy website. My repo has a folder in just called <code>proxy</code> with the following <code>web.config</code> file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outboundRules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;ReverseProxyOutboundRule_CM&quot;</span> <span class="attr">preCondition</span>=<span class="string">&quot;ResponseIsHtml1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">filterByTags</span>=<span class="string">&quot;A, Form, Img&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^http(s)?://localhost:44001/(.*)&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http&#123;R:1&#125;://myproject-cm.dev.local/&#123;R:2&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;ReverseProxyOutboundRule_CD&quot;</span> <span class="attr">preCondition</span>=<span class="string">&quot;ResponseIsHtml1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">filterByTags</span>=<span class="string">&quot;A, Form, Img&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^http(s)?://localhost:44002/(.*)&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">value</span>=<span class="string">&quot;http&#123;R:1&#125;://&#123;ORIGINAL_HOST&#125;/&#123;R:2&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">preConditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">preCondition</span> <span class="attr">name</span>=<span class="string">&quot;ResponseIsHtml1&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;RESPONSE_CONTENT_TYPE&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^text/html&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">preCondition</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">preConditions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">outboundRules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;ReverseProxyInboundRule_CM&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;(.*)&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAll&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;HTTP_HOST&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^(myproject-cm\.dev\.local)$&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span> <span class="attr">matchType</span>=<span class="string">&quot;IsFile&quot;</span> <span class="attr">negate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;http://localhost:44001/&#123;R:1&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;ReverseProxyInboundRule_CD&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;(.*)&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAll&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;HTTP_HOST&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^((site1|site2|site3)\.dev\.local)$&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;REQUEST_FILENAME&#125;&quot;</span> <span class="attr">matchType</span>=<span class="string">&quot;IsFile&quot;</span> <span class="attr">negate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;http://&#123;HTTP_HOST&#125;:44002/&#123;R:1&#125;&quot;</span> <span class="attr">logRewrittenUrl</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">serverVariables</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;ORIGINAL_HOST&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;HTTP_HOST&#125;&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">serverVariables</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">urlCompression</span> <span class="attr">doStaticCompression</span>=<span class="string">&quot;false&quot;</span> <span class="attr">doDynamicCompression</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>To create the IIS Website, a developer simply needs to run a couple of PowerShell scripts:</p><p>First, <code>Create-WildcardCert.ps1</code>, this just creates a <code>*.dev.local</code> cert for local development. There are various versions of this script floating about. I can’t remember exactly the origins of this one, if its yours DM me on Slack and I’ll add a credit here!</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Param</span>(</span><br><span class="line">    <span class="variable">$WildCardDomain</span> = <span class="string">&quot;*.dev.local&quot;</span>,</span><br><span class="line">    <span class="variable">$RootDomain</span> = <span class="string">&quot;dev.local&quot;</span>,</span><br><span class="line">    <span class="variable">$WildCardCertName</span> = <span class="string">&quot;DO NOT TRUST Sitecore Local Development dev.local&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">process</span> &#123;</span><br><span class="line">    <span class="comment"># Generate SSL cert</span></span><br><span class="line">    <span class="variable">$existingCert</span> = <span class="built_in">Get-ChildItem</span> Cert:\LocalMachine\Root | <span class="built_in">Where</span> FriendlyName <span class="operator">-eq</span> <span class="variable">$WildCardCertName</span></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$existingCert</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;Creating &amp; trusting an new SSL Cert for <span class="variable">$WildCardCertName</span>&quot;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Generate a cert</span></span><br><span class="line">        <span class="comment"># https://docs.microsoft.com/en-us/powershell/module/pkiclient/new-selfsignedcertificate?view=win10-ps</span></span><br><span class="line">        <span class="variable">$cert</span> = <span class="built_in">New-SelfSignedCertificate</span> <span class="literal">-FriendlyName</span> <span class="variable">$WildCardCertName</span> <span class="literal">-Subject</span> <span class="variable">$RootDomain</span> <span class="literal">-DnsName</span> <span class="variable">$RootDomain</span>,<span class="variable">$WildCardDomain</span> <span class="literal">-CertStoreLocation</span> <span class="string">&quot;cert:\LocalMachine\My&quot;</span> <span class="literal">-Type</span> SSLServerAuthentication <span class="literal">-NotAfter</span> (<span class="built_in">Get-Date</span>).AddYears(<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">Export-Certificate</span> <span class="literal">-Cert</span> <span class="variable">$cert</span> <span class="literal">-FilePath</span> <span class="string">&quot;<span class="variable">$PSScriptRoot</span>\<span class="variable">$RootDomain</span>.cer&quot;</span></span><br><span class="line">        <span class="built_in">Import-Certificate</span> <span class="literal">-Filepath</span> <span class="string">&quot;<span class="variable">$PSScriptRoot</span>\<span class="variable">$RootDomain</span>.cer&quot;</span> <span class="literal">-CertStoreLocation</span> <span class="string">&quot;cert:\LocalMachine\Root&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we have <code>Create-ReverseProxy.ps1</code>. Pretty self explanitory, this script creates the AppPool and Web application in IIS:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Import-Module</span> WebAdministration</span><br><span class="line"></span><br><span class="line">    <span class="variable">$iisAppPoolName</span> = <span class="string">&quot;myproject-reverse-proxy-app&quot;</span></span><br><span class="line">    <span class="variable">$iisAppPoolDotNetVersion</span> = <span class="string">&quot;v4.0&quot;</span></span><br><span class="line">    <span class="variable">$iisAppName</span> = <span class="string">&quot;myproject-reverse-proxy&quot;</span></span><br><span class="line">    <span class="variable">$directoryPath</span> = <span class="built_in">Get-Item</span> <span class="variable">$PSScriptRoot</span>\..\proxy | % &#123; <span class="variable">$_</span>.FullName &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#navigate to the app pools root</span></span><br><span class="line">    <span class="built_in">Set-Location</span> <span class="literal">-Path</span> IIS:\AppPools\</span><br><span class="line"></span><br><span class="line">    <span class="comment">#check if the app pool exists</span></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="variable">$iisAppPoolName</span> <span class="literal">-pathType</span> container))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;Creating the application pool&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#create the app pool</span></span><br><span class="line">        <span class="variable">$appPool</span> = <span class="built_in">New-Item</span> <span class="variable">$iisAppPoolName</span></span><br><span class="line">        <span class="variable">$appPool</span> | <span class="built_in">Set-ItemProperty</span> <span class="literal">-Name</span> <span class="string">&quot;managedRuntimeVersion&quot;</span> <span class="literal">-Value</span> <span class="variable">$iisAppPoolDotNetVersion</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Trying to create the Site&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#navigate to the sites root</span></span><br><span class="line">    <span class="built_in">Set-Location</span> <span class="literal">-Path</span> IIS:\Sites\</span><br><span class="line"></span><br><span class="line">    <span class="comment">#check if the site exists</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Test-Path</span> <span class="variable">$iisAppName</span> <span class="literal">-pathType</span> container)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;Site already exists&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#create the site</span></span><br><span class="line">    <span class="variable">$iisApp</span> = <span class="built_in">New-Item</span> <span class="variable">$iisAppName</span> <span class="literal">-bindings</span> <span class="selector-tag">@</span>&#123;protocol=<span class="string">&quot;http&quot;</span>;bindingInformation=<span class="string">&quot;:80:&quot;</span> + <span class="variable">$iisAppName</span>&#125; <span class="literal">-physicalPath</span> <span class="variable">$directoryPath</span></span><br><span class="line">    <span class="variable">$iisApp</span> | <span class="built_in">Set-ItemProperty</span> <span class="literal">-Name</span> <span class="string">&quot;applicationPool&quot;</span> <span class="literal">-Value</span> <span class="variable">$iisAppPoolName</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Adding Bindings&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">New-WebBinding</span> <span class="literal">-Name</span> <span class="variable">$iisAppName</span> <span class="literal">-IPAddress</span> <span class="string">&quot;*&quot;</span> <span class="literal">-Port</span> <span class="number">443</span> <span class="literal">-Protocol</span> https <span class="literal">-HostHeader</span> <span class="string">&quot;site1.dev.local&quot;</span></span><br><span class="line">    <span class="built_in">New-WebBinding</span> <span class="literal">-Name</span> <span class="variable">$iisAppName</span> <span class="literal">-IPAddress</span> <span class="string">&quot;*&quot;</span> <span class="literal">-Port</span> <span class="number">443</span> <span class="literal">-Protocol</span> https <span class="literal">-HostHeader</span> <span class="string">&quot;site2.dev.local&quot;</span></span><br><span class="line">    <span class="built_in">New-WebBinding</span> <span class="literal">-Name</span> <span class="variable">$iisAppName</span> <span class="literal">-IPAddress</span> <span class="string">&quot;*&quot;</span> <span class="literal">-Port</span> <span class="number">443</span> <span class="literal">-Protocol</span> https <span class="literal">-HostHeader</span> <span class="string">&quot;site3.dev.local&quot;</span></span><br><span class="line">    <span class="built_in">New-WebBinding</span> <span class="literal">-Name</span> <span class="variable">$iisAppName</span> <span class="literal">-IPAddress</span> <span class="string">&quot;*&quot;</span> <span class="literal">-Port</span> <span class="number">443</span> <span class="literal">-Protocol</span> https <span class="literal">-HostHeader</span> <span class="string">&quot;myproject-cm.dev.local&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Done&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I’m not a PowerShell wizard, so I’m sure this script could be made better. Most of the time, adding those bindings will select the correct <code>*.dev.local</code> certificate. But it doesn’t everytime and my PowerShell skills haven’t been able to figure out why yet. I’m sure someone will have a better way of doing that.</p><h3 id="Running-the-Sites"><a href="#Running-the-Sites" class="headerlink" title="Running the Sites"></a>Running the Sites</h3><p>Now that the reverse proxy is setup, all that remains is to run <code>docker-compose up</code>, wait for the conainers to start up and then hit one of those urls in your browser. You should see that Sitecore is responding nicely to the custom host names. There is no need to add a port number to the host and the Site Resolving should also work nicely.</p><p>As I mentioned above, there are a few ways of doing this. This is just one way that I have found that works well for our development team. I think Sitecore on Docker is a fantastic thing, it allows us to onboard new developers in minutes vs hours, and with just a few simple PowerShell scripts instead of complex and time consuming Sitecore installs. </p><p>Thanks to everyone that wrote blog posts on Docker and who helps out a lot on the <a href="https://sitecore.chat">Sitecore Slack</a> channel for <code>#docker</code>, big thanks to Michael West and Mark Cassidy for blogs, git repos and answering stupid questions when I had them :)</p><p>Do you have another way, a better way to do this? Let me know in the comments or hit me up on Sitecore Slack - I’m <code>@guitarrich</code></p><p>Thanks</p><p>– Richard.</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2020/02/19/Sitecore-Docker-Making-Those-Urls-Pretty/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Custom Fonts Not Downloading in SXA Theme</title>
      <link>http://www.sitecorenutsbolts.net/2019/08/09/Custom-Fonts-Not-Downloading-in-SXA-Theme/</link>
      <guid>http://www.sitecorenutsbolts.net/2019/08/09/Custom-Fonts-Not-Downloading-in-SXA-Theme/</guid>
      <pubDate>Fri, 09 Aug 2019 19:34:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;A collegue of mine ran into a weird problem recently with getting a custom font to download properly in his SXA site theme. Once I looked
        
      
      </description>
      
      <content:encoded><![CDATA[<p>A collegue of mine ran into a weird problem recently with getting a custom font to download properly in his SXA site theme. Once I looked at the theme items, I realized the problem right away, its a problem that I ran into and I have helped out a number of developers on <a href="https://sitecore.chat">Sitecore Slack</a> with the same problem, so I thought it time to have a more permanent record of this:</p><h2 id="The-problem-with-fonts-in-SXA"><a href="#The-problem-with-fonts-in-SXA" class="headerlink" title="The problem with fonts in SXA"></a>The problem with fonts in SXA</h2><p>Here is a pretty typical setup for a <code>font-face</code> definition in your sass files:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &#39;Gotham&#39;;</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-medium.eot&#39;);</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-medium.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-medium.woff&quot;) format(&quot;woff&quot;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-medium.otf&quot;) format(&quot;opentype&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &#39;Gotham-Bold&#39;;</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-bold.eot&#39;);</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-bold.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-bold.woff&quot;) format(&quot;woff&quot;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-bold.otf&quot;) format(&quot;opentype&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &#39;Gotham-Black&#39;;</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-black.eot&#39;);</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-black.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-black.woff&quot;) format(&quot;woff&quot;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-black.otf&quot;) format(&quot;opentype&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &#39;Gotham-Book&#39;;</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-book.eot&#39;);</span><br><span class="line">    src: url(&#39;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-book.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-book.woff&quot;) format(&quot;woff&quot;),</span><br><span class="line">    url(&quot;..&#x2F;fonts&#x2F;gotham&#x2F;gotham-book.otf&quot;) format(&quot;opentype&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>And here are the corresponding font files:</p><img src="/2019/08/09/Custom-Fonts-Not-Downloading-in-SXA-Theme/gothamfiles.png" class="" title="Gotham Font Files"><p>So far, nothing strange about that, and in a classic Sitecore site where the files are stored on the file system, that would be all you need to do. In fact, if your FED team are styling the theme using the static html files exported by Creative Exchange, everything will look great.</p><p>But now lets import that theme into Sitecore and all of a sudden the font files stop downloading properly. The mime type is wrong and the browser can’t decode the fonts. So what gives?</p><p>Let’s look at the items created in Sitecore and see if you can spot the problem:</p><img src="/2019/08/09/Custom-Fonts-Not-Downloading-in-SXA-Theme/gothamsitecoreitems.png" class="" title="Gotham Font Files as Sitecore Items"><p>Spot the problem? When the files are uploaded to Sitecore, the file extension is stripped off and just added as meta data on the media item. When the browser makes a request to <code>../fonts/gotham/gotham-medium.woff, Sitecore ignores the</code>.woff<code>extension and tries to resolve</code>gotham-medium<code>to an item. As there are 7 items called</code>gotham-medium<code>in the folder, Sitecore will always return the first one it finds. Which in my case was</code>gotham-medium.eot` and that is not going to work in Chrome!</p><h2 id="Rename-Your-Font-Files"><a href="#Rename-Your-Font-Files" class="headerlink" title="Rename Your Font Files"></a>Rename Your Font Files</h2><p>The simple answer here is to append the extension to the font file before uploading:</p><img src="/2019/08/09/Custom-Fonts-Not-Downloading-in-SXA-Theme/gothamsitecoreitemsfixed.png" class="" title="Fixed font file names"><p>and update your sass to reference the new font names, now Sitecore know’s which font file you want.</p><p>Hope this helps someone who might be having a similar problem!</p><p>– Richard</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2019/08/09/Custom-Fonts-Not-Downloading-in-SXA-Theme/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SXA Security Headers 1.1</title>
      <link>http://www.sitecorenutsbolts.net/2019/05/20/SXA-Security-Headers-1-1/</link>
      <guid>http://www.sitecorenutsbolts.net/2019/05/20/SXA-Security-Headers-1-1/</guid>
      <pubDate>Mon, 20 May 2019 18:06:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;I am pleased to announce the latest version of &lt;a href=&quot;https://github.com/GuitarRich/SXA.SecurityHeaders&quot;&gt;SXA Security Headers&lt;/a&gt;. This
        
      
      </description>
      
      <content:encoded><![CDATA[<p>I am pleased to announce the latest version of <a href="https://github.com/GuitarRich/SXA.SecurityHeaders">SXA Security Headers</a>. This version contains the same functionality, but has been built and tested against the latest versions of Sitecore. Currently it supports all versions of Sitecore from v9-9.1.1 and SXA 1.7.0-1.8.1.</p><p>I have also fixed an issue with the folders in the Sitecore Package where some of the enumerations were being stored in the wrong place.</p><p>My access to the market place is messed up right now due to an email change, but as soon as I get it back, I’ll upload the latest packages there. For now you can download the latest from the <a href="https://github.com/GuitarRich/SXA.SecurityHeaders/releases">github releases page</a>. </p><p>There are 3 packages, a full package with items and binaries, I have also included an “Items Only” package for easy installation if you want to fork the code and use that direct in your solution. Finally, there is a binaries only package for ease of deployment on CD instances.</p><p>I would love to hear any suggestions on how this module can be improved or new features added, or just how you are using it in your project.</p><p>– Richard.</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2019/05/20/SXA-Security-Headers-1-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore SXA: Using Placeholders with NVelocity Templates</title>
      <link>http://www.sitecorenutsbolts.net/2018/10/23/Sitecore-SXA-Using-Placeholders-with-NVelocity-Templates/</link>
      <guid>http://www.sitecorenutsbolts.net/2018/10/23/Sitecore-SXA-Using-Placeholders-with-NVelocity-Templates/</guid>
      <pubDate>Tue, 23 Oct 2018 14:03:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Recently I came across a situation where I needed to use an NVelocity template in a Rendering Variant. We were creating a custom slider a
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Recently I came across a situation where I needed to use an NVelocity template in a Rendering Variant. We were creating a custom slider and using the awesome <a href="">Slick Slider</a> as it gives us a lot of nice options, and it has some good extras for accessibility that the OOTB Carousel component does not have at the time of writing. For the slide content, we still used a <code>Page Content</code> component and a custom Rendering Variant, but on the slide I wanted to make the <code>Slide Image</code> field a background image on the main <code>&lt;div&gt;</code> element. The second requirement was that the design called for 2 types of slide, one with just the background image, and one where we could add a child component into a placeholder. This could be used as a promo/call to action, but needed to be detached from the slide content. This would allow the client to personalize and test the call to action separately from the slide imagery.</p><p>Here is an example of the markup I needed to reproduce in the Rendering Variant:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-slide&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image:url(&#x27;/-/media/mybackgroundimage.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-slide-content&quot;</span>&gt;</span></span><br><span class="line">        @Html.Sitecore().Placeholder(&quot;carousel-slide-placeholder-key&quot;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The first problem is that currently OOTB you can’t set an image field as a background image on a html tag. Fortunately there are some nice blog posts already out there on how to extend the NVelocity template:</p><ul><li>Michael West has post post on a <a href="https://michaellwest.blogspot.com/2017/04/custom-rendering-variant-token-tool-for-sxa.html">Custom Rendering Variant Token Tool for SXA</a></li><li>Chaitanya Marwah hit prettly close with this post on <a href="http://www.cmsitecore.com/2017/09/design-sitecore-sxa-components-using.html">Design Sitecore SXA components using Variant Template</a></li></ul><h2 id="Quick-Reminder-on-how-to-Extend-the-Template"><a href="#Quick-Reminder-on-how-to-Extend-the-Template" class="headerlink" title="Quick Reminder on how to Extend the Template"></a>Quick Reminder on how to Extend the Template</h2><p>Just as a refersher on how to extend the template, first we need a new processor adding to the <code>getVelocityTemplateRenderers</code> pipeline. Implement <code>IGetTemplateRenderersPipelineProcessor</code> and add your code to the <code>Process</code> method:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddTemplateRenderers</span> : <span class="title">IGetTemplateRenderersPipelineProcessor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">GetTemplateRenderersPipelineArgs args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Assert.ArgumentNotNull(args.Context, <span class="string">&quot;args.Context&quot;</span>);</span><br><span class="line">        args.Context.Put(<span class="string">&quot;fieldTokens&quot;</span>, <span class="keyword">new</span> FieldTokens());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And patch it in:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">xmlns:patch</span>=<span class="string">&quot;http://www.sitecore.net/xmlconfig/&quot;</span> <span class="attr">xmlns:set</span>=<span class="string">&quot;http://www.sitecore.net/xmlconfig/set/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitecore</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pipelines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">getVelocityTemplateRenderers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">processor</span> <span class="attr">type</span>=<span class="string">&quot;Foundation.SXA.Pipelines.Variants.GetVelocityTemplateRenderers.AddTemplateRenderers, Foundation.SXA&quot;</span> <span class="attr">resolve</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">getVelocityTemplateRenderers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pipelines</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitecore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Next, create the static method to get the url from an image field:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FieldTokens</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetImageUrl</span>(<span class="params">Item item, <span class="built_in">string</span> fieldName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (item != <span class="literal">null</span> &amp;&amp; fieldName != <span class="built_in">string</span>.Empty)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> field = (ImageField)item.Fields[fieldName];</span><br><span class="line">            <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                url = ItemExtensions.ImageUrl(item, fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This now lets us create the Template definition with the following code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-slide&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;background-image: url(&quot;$fieldTokens.GetImageUrl($item, &quot;SlideImage&quot;)&quot;)&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-slide-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- <span class="doctag">TODO:</span> Add Placeholder Here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Creating-the-Rendering-Variant"><a href="#Creating-the-Rendering-Variant" class="headerlink" title="Creating the Rendering Variant"></a>Creating the Rendering Variant</h2><p>So the next task is to add the placeholder in the right place. This is where the problem started. There is no way to add a placeholder into a template out of the box. Adding a placeholder requires a valid view context, so trying to add one in the same way that we added the token for the image url would be overly complex.</p><p><a href="https://twitter.com/MichaelWest101">Michael West</a> came up with a great suggestion, in the template we create the start of the <code>&lt;div&gt;</code> markup. Like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;carousel-slide&quot; style&#x3D;&#39;background-image: url(&quot;$fieldTokens.GetImageUrl($item, &quot;SlideImage&quot;)&quot;)&#39;&gt;</span><br></pre></td></tr></table></figure><p>I would set the <code>Tag</code> field to empty, so that there is no other markup added. Next we create a section that contains the placeholder items. Finally we can add a <code>Text</code> item in the variant definition with <code>&lt;/div&gt;</code> in the text to close the earlier <code>div</code>.</p><p>Now all I need to do is to add the placeholder item in between those 2 items and I should be golden!</p><img src="/2018/10/23/Sitecore-SXA-Using-Placeholders-with-NVelocity-Templates/variantsetup.png" class="" title="Rendering Variant Setup"><h2 id="Huston…-We-have-a-problem"><a href="#Huston…-We-have-a-problem" class="headerlink" title="Huston… We have a problem"></a>Huston… We have a problem</h2><p>Or so I thought… it turns out that even with the <code>Tag</code> field empty in a <code>VariantTemplate</code> item still adds a <code>div</code> surrounding the contents of the <code>Template</code> field. So the markup looked like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-slide&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image:url(&#x27;/-/media/mybackgroundimage.jpg&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-slide-content&quot;</span>&gt;</span></span><br><span class="line">        @Html.Sitecore().Placeholder(&quot;carousel-slide-placeholder-key&quot;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Which is invalid and although most browsers helpfully try to close the div’s, it didn’t give me what I needed. After a bit of digging, the offending code can be found here in the <code>Sitecore.XA.Foundation.RenderingVariants.Pipelines.RenderVariantField.RenderTemplate</code> processor. Here is the <code>RenderField</code> method:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RenderField</span>(<span class="params">RenderVariantFieldArgs args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Sitecore.XA.Foundation.RenderingVariants.Fields.VariantTemplate variantField = args.VariantField <span class="keyword">as</span> Sitecore.XA.Foundation.RenderingVariants.Fields.VariantTemplate;</span><br><span class="line">  <span class="keyword">if</span> (variantField == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  HtmlGenericControl tag = <span class="keyword">new</span> HtmlGenericControl(<span class="built_in">string</span>.IsNullOrWhiteSpace(variantField.Tag) ? <span class="string">&quot;div&quot;</span> : variantField.Tag);</span><br><span class="line">  <span class="keyword">this</span>.AddClass(tag, variantField.CssClass);</span><br><span class="line">  <span class="keyword">this</span>.AddWrapperDataAttributes((RenderingVariantFieldBase) variantField, args, tag);</span><br><span class="line">  Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; parameters = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;()</span><br><span class="line">  &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;item&quot;</span>,</span><br><span class="line">      (<span class="built_in">object</span>) args.Item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (args.Parameters != <span class="literal">null</span> &amp;&amp; args.Parameters.ContainsKey(<span class="string">&quot;geospatial&quot;</span>))</span><br><span class="line">    parameters.Add(<span class="string">&quot;geospatial&quot;</span>, args.Parameters[<span class="string">&quot;geospatial&quot;</span>]);</span><br><span class="line">  tag.InnerHtml = ServiceLocator.ServiceProvider.GetService&lt;ITemplateRenderer&gt;().ExecuteTemplate(args.Item.Name, variantField.Template, parameters);</span><br><span class="line">  args.ResultControl = (Control) tag;</span><br><span class="line">  args.Result = <span class="keyword">this</span>.RenderControl(args.ResultControl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see here on line 6, that if the <code>varitantField.Tag</code> property is null or white space, then a <code>div</code> tag will be defaulted too! So now I knew where the problem was, I can set about fixing it! </p><p>First we need to override the <code>RenderTemplate</code> processor in the <code>RenderVariantField</code> pipeline. So create a new processor class and inherit from the existing one. Then override the <code>RenderField</code> method:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RenderTemplate</span> :</span> Sitecore.XA.Foundation.RenderingVariants.Pipelines.RenderVariantField.RenderTemplate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RenderField</span><span class="params">(RenderVariantFieldArgs args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var variantField = args.VariantField as VariantTemplate;</span><br><span class="line">        <span class="keyword">if</span> (variantField == null)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(variantField.Tag))</span><br><span class="line">        &#123;</span><br><span class="line">            base.RenderField(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            var templateRenderer = ServiceLocator.ServiceProvider.GetService&lt;ITemplateRenderer&gt;();</span><br><span class="line">            var parameters = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, object&gt;() &#123; &#123; <span class="string">&quot;item&quot;</span>, args.Item &#125; &#125;;</span><br><span class="line">            <span class="keyword">if</span> (args.Parameters != null &amp;&amp; args.Parameters.ContainsKey(<span class="string">&quot;geospatial&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                parameters.Add(<span class="string">&quot;geospatial&quot;</span>, args.Parameters[<span class="string">&quot;geospatial&quot;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// There is no surrounding html tag, so just render the resulting string from the template.</span></span><br><span class="line">            args.Result = templateRenderer.ExecuteTemplate(args.Item.Name, variantField.Template, parameters);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now on line 12, we check to see if the <code>variantField.Tag</code> has been filled in or not. If it has, we pass this through to the base method and let it do its thing. If not, we will take over. We have to get the <code>templateRenderer</code> and build the <code>parameters</code> object to be able to render the field. But now we are not creating any surrounding tag, we are just executing the template and adding the resuling html to the <code>args.Result</code> property.</p><p>Now our variant renders exactly as I wanted it to, with a <code>div</code> containing a background image, the placeholder in the middle and then the closing <code>&lt;/div&gt;</code> tag.</p><p>I’m not sure why the default behaviour is to force a <code>div</code> tag around template variants if the <code>Tag</code> field is left empty. But hopefully this option will help others who need to be a bit more creative with the rendering variant definitions!</p><p>Thanks to Michael West for helping out with the original idea!</p><p>–Richard</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2018/10/23/Sitecore-SXA-Using-Placeholders-with-NVelocity-Templates/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore SXA: Using HTTP Headers to Secure Your Site</title>
      <link>http://www.sitecorenutsbolts.net/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/</link>
      <guid>http://www.sitecorenutsbolts.net/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/</guid>
      <pubDate>Fri, 27 Jul 2018 18:35:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;I recently came across a nice post on &lt;a href=&quot;https://blog.heroku.com/using-http-headers-to-secure-your-site&quot;&gt;Using HTTP Headers to Secu
        
      
      </description>
      
      <content:encoded><![CDATA[<p>I recently came across a nice post on <a href="https://blog.heroku.com/using-http-headers-to-secure-your-site">Using HTTP Headers to Secure Your Site</a> by <a href="https://blog.heroku.com/authors/caleb-thompson">Caleb Thompson</a>. Now while the blog post was targeted at Ruby, the principles here apply to any website. Using <a href="https://observatory.mozilla.org/">Observatory</a> by mozilla, we can scan our site and using the results see what we need to configure to help with the security of the site.</p><p>As the project I am working on right now is very security focused, the content here is very relevant. So I looked into how we can configure this in a Sitecore SXA build. From that came a new module which I will host on my github account: <a href="https://github.com/GuitarRich/SXA.SecurityHeaders">SXA Security Headers</a>. As soon as Sitecore approves the module on the market place I will post a link here too.</p><p>Now, this is not a completely new subject for Sitecore builds, both <a href="https://twitter.com/akshaysura13">Akshay Sura</a> and <a href="https://twitter.com/BasLijten">Bas Lijten</a>, addressed this a couple of years ago, their posts and module also served as inspiration for this:</p><ul><li><a href="https://www.akshaysura.com/2016/08/19/secure-sitecore-secure-headers-xss-protection/">Secure Sitecore : Secure Headers XSS Protection</a></li><li><a href="https://www.akshaysura.com/2016/08/02/secure-sitecore-headers-are-a-headache-but-nothing-we-cannot-solve/">Secure Sitecore : Headers are a headache but nothing we cannot solve!</a></li><li><a href="http://blog.baslijten.com/sitecore-security-3-prevent-xss-using-content-security-policy/">Sitecore Security #3: Prevent XSS using Content Security Policy</a></li></ul><p>But my requirements needed a way have having this in a multisite environment, with custom headers per site. SXA does multisite very well, so lets follow their pattern.</p><h2 id="What-do-the-Security-Headers-actually-do"><a href="#What-do-the-Security-Headers-actually-do" class="headerlink" title="What do the Security Headers actually do?"></a>What do the Security Headers actually do?</h2><p>So lets first look at what security headers we will be adding and a quick overview of what they are for. I’m not going into detail here, because there are many resources available already for this:</p><h4 id="Content-Security-Policy-CSP"><a href="#Content-Security-Policy-CSP" class="headerlink" title="Content Security Policy (CSP)"></a>Content Security Policy (CSP)</h4><p>This is a pretty well known header. CSP gives us control over where scripts and resources we reference on our site can be loaded from. This normally would include your own site, and maybe a few external CDN sites, like Google Tag Manager. The header can be broken down to protect various types of assets, such as <code>scripts</code>, <code>images</code>, <code>css</code> etc…</p><p>A list of the policy options for the Content Security Policy and what each one does can be found here: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">Mozilla: Content Security Policy</a>.</p><p>This header also helps to protect against XSS attacks, by controlling who is allowed to load scripts on to our site. You can add the source for <code>frame-ancestors</code>, this prevents our site from being loaded into an iFrame on any site, except those that we allow. It helps prevent <a href="https://www.owasp.org/index.php/Clickjacking">clickjacking attacks</a>.</p><h4 id="HTTP-Strict-Transport-Security-HSTS"><a href="#HTTP-Strict-Transport-Security-HSTS" class="headerlink" title="HTTP Strict Transport Security (HSTS)"></a>HTTP Strict Transport Security (HSTS)</h4><p>HSTS tells the browser that our site should <em>only</em> be viewed over https. The details of the attributes are on the <a href="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet">OWASP Cheat Sheet for HSTS</a>. Enable this if you only want https traffic… which… should be everyone by now!</p><h4 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h4><p>This will tell the browser not to load scripts or styleshees if the MIME type as indicated by the server is not correct.</p><h4 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h4><p>This is a fallback for older browsers that do not obey the <code>frame-ancestors &#39;none&#39;</code> CSP. It will prevent your site from being loaded into an iFrame.</p><h4 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h4><p>Again, a fallback for older browser and provides similar protection against XSS attacks as the CSP will.</p><h4 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer Policy"></a>Referrer Policy</h4><p>The referrer policy defines whether the referrer header is sent to the destination when a user clicks a link.</p><h2 id="Lets-do-this-with-SXA-Security-Headers"><a href="#Lets-do-this-with-SXA-Security-Headers" class="headerlink" title="Lets do this with SXA Security Headers"></a>Lets do this with SXA Security Headers</h2><p>So how does the module work? The module works on a Site basis, so if you are multisite, you can specify your security headers per site. It adds a new <code>Settings</code> item that contains child items for each of the above headers.</p><img src="/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/templates.png" class="" title="SXA Security Headers Templates"><p>Each of these items is responsible for setting a security header when added to an SXA Site.</p><h3 id="Installing-the-module"><a href="#Installing-the-module" class="headerlink" title="Installing the module"></a>Installing the module</h3><p>To install the module, just download the package and install using the Sitecore Package Installer. It is setup to follow the standard SXA patterns, so once installed, you can right click your Tenant/Site and add the module. </p><p>Once the package is installed you will be able to add the module to your tennent and then site. Once it is added, navigate to your SXA Site Settings item. A new settings item called  <code>Security Headers</code> will have been created. An insert option rule included in the package will enable the right-click insert ability:</p><img src="/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/install.png" class="" title="Settings Item after install"><p>Once you have that, you can select which security headers you want to include in the site. Simply, right-click the <strong>Security Headers</strong> item, go to insert, and select from the available options.</p><p>A basic set of default header items will be created when you add the feature to your site.</p><h3 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content Security Policy"></a>Content Security Policy</h3><p>The Content Security Policy header allows you to either enforce or just report violations. Set the checkbox on the item. To configure the different CSP options, you must insert a child item for each source type you want to control. Right-Click the CSP item and insert a <strong>New Policy</strong>:</p><img src="/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/newpolicy.png" class="" title="Insert new Content Security Policy"><p>This runs a Sitecore PowerShell script that displays a dialog, giving you all the available options for the policies. It also detects which policies you have already added and removes those from the list. Simply select the required policy and then set the hosts you want to allow on your site. </p><img src="/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/newpolicywizard.png" class="" title="Select a policy type"><p>The module comes with a set of predefined hosts/options that you can select from, but there is also a free text field for you to add any extras:</p><img src="/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/policyoptions.png" class="" title="Content Security Policy Options"><h3 id="Other-Headers"><a href="#Other-Headers" class="headerlink" title="Other Headers"></a>Other Headers</h3><p>The other insert options will give you the ability to add the following headers to your site:</p><ul><li>HTTP Strict Transport Security (HSTS)</li><li>X-Content-Type-Options</li><li>X-Frame-Options</li><li>X-XSS-Protection</li><li>Referrer Policy</li></ul><p>For each item there are a set of fields ranging from a simple, Enable/Disable checkbox, to a field to set the required value of the header.</p><h2 id="Useful"><a href="#Useful" class="headerlink" title="Useful?"></a>Useful?</h2><p>Hopefully someone else will find this useful, although this is a problem that has options already in the Sitecore world, with the new world of SXA and multi-tennancy/multi-sites, this should provide enough flexibility to help make our implementations secure. This is only one of the many steps we may need to take, but its something that we should all be implementing for our clients.</p><p>Let me know your thoughts.</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2018/07/27/Sitecore-SXA-Using-HTTP-Headers-to-Secure-Your-Site/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore SXA: Custom PageList Datasources</title>
      <link>http://www.sitecorenutsbolts.net/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/</link>
      <guid>http://www.sitecorenutsbolts.net/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/</guid>
      <pubDate>Fri, 16 Mar 2018 15:54:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Sitecore Experience Accelerator (&lt;a href=&quot;https://doc.sitecore.net/sitecore_experience_accelerator&quot;&gt;SXA&lt;/a&gt;) has so many cool features to
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Sitecore Experience Accelerator (<a href="https://doc.sitecore.net/sitecore_experience_accelerator">SXA</a>) has so many cool features to help us as developers to create amazing Sitecore implemnentations.</p><img src="/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/amazing.gif" class="" title="Sitecore SXA - Amazing!"><p>One component that I find myself using a lot, is the <code>Page List</code>. This component allows a marketer to display a list of pages from the site. This could be a list of products, blog pages, news articles etc… We can configure how the page list gets its list of pages by either setting a datasource or setting the <code>Source Type</code> field.</p><img src="/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/sourcetype.png" class="" title="Set the Source Type on a Page List"><p>The Source Type is build from a list of <code>Query</code> items that can be found under <code>Site\Settings\Item Queries</code>. This item contains a <code>DataSource</code> field that allows a developer to define what items should appear. We could set a root item, or maybe use a Search Query in there. <a href="https://sitecore.stackexchange.com/users/237/gatogordo">Gert Gullentops</a> has a nice article on using the <a href="https://ggullentops.blogspot.com/2017/04/sitecore-sxa-pagelist-item-query.html">Page List component &amp; Item Queries</a> that details how you can set those up and how powerful they can be.</p><img src="/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/itemqueries.png" class="" title="Item Queries"><p>Unfortunately, for my needs, they did not work. I had 2 requirements:</p><ol><li>I needed to show a list of sibling items that were of the same template as the context item, <em>BUT</em> excluded the current context item.</li><li>I needed to show a list of items that were related to the current context item by matching any of the tags selected.</li></ol><p>Although the default source types contains an <code>Item Query</code> for <code>Siblings</code> - when set to this, it does not exclude the current context item. Thank you to <a href="https://sitecore.stackexchange.com/users/16/alan-p%C5%82%C3%B3cieniak">Alan Płócieniak</a> on the Sitecore Slack channel for introducing me to an undocumented gem: </p><h2 id="code-datasources"><a href="#code-datasources" class="headerlink" title="code: datasources."></a><code>code:</code> datasources.</h2><p>A code datasource is pretty self explainitory - it uses some custom code to resolve the datasource item. To use it, you can set the DataSource field to a class that implements <code>Sitecore.Buckets.FieldTypes.IDataSource</code>. This interface has a single method to implement:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDataSource</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Item[] <span class="title">ListQuery</span>(<span class="params">Item item</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This method allows you to get an array of items that you want to use for your datasource. The <code>Item</code> passed in, will depend on where you have set the datasource. If you are using this on an <code>Item Query</code> or just setting the datasource of a component, it will be the <code>Context.Item</code>. This will be invoked in the <code>resolveRenderingDatasource</code> pipeline processor <code>Sitecore.XA.Foundation.LocalDatasources.Pipelines.ResolveRenderingDatasource.CodeDatasource</code>. </p><p>So lets look at some code that will give us the results we needed for our first requirement. All siblings of the same template, excluding the current item:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Sitecore.Data.Items;</span><br><span class="line"><span class="keyword">using</span> Sitecore.XA.Foundation.SitecoreExtensions.Extensions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject.Feature.Navigation.CodeDatasources</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SiblingsExcludingContextItem</span> : <span class="title">Sitecore.Buckets.FieldTypes.IDataSource</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item[] <span class="title">ListQuery</span>(<span class="params">Item item</span>)</span> =&gt; </span><br><span class="line">            item.GetSiblings().Where(sibling =&gt; sibling.TemplateID == item.TemplateID).ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nice and simple. <code>.GetSiblings()</code> is a nice little extension method in the <code>Sitecore.XA.Foundation.SitecoreExtensions.Extensions</code> namespace, that calls:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item.Parent.GetChildren().Where(sibling =&gt; sibling.ID != item.ID).ToList();</span><br></pre></td></tr></table></figure><p>So that already excludes our context item, as that is what we are using to call the <code>GetSiblings()</code> method. When we just add a filter on to make sure the template ID matches and return the array of items.</p><p>Now we need to use it in our page list. For this we will use an <code>Query</code> item and set the source type. This will make it simple for marketers to add this type of filter on any page. So lets create a new <code>Query</code> item in the <code>site\Settings\Item Queries</code> folder. And set the datasource field to our code above. The value would be <code>code:MyProject.Feature.Navigation.CodeDatasources.SiblingsExcludingContextItem, MyProject.Feature.Navigation</code></p><img src="/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/codedatasource.png" class="" title="Creating the Code Datasource Item Query"><p>Now on my Page List component, I can just set the source type to <code>Sublings Excluding the Current Item</code> and it works like a dream!</p><p>So what about building a Page List code datasource that will show us related items by tag? Let’s keep this simple by assuming that we only want to get related siblings of the current item:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SiblingsWithMatchingTag</span> : <span class="title">Sitecore.Buckets.FieldTypes.IDataSource</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item[] <span class="title">ListQuery</span>(<span class="params">Item item</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> sourceItemTagIds = GetTagIds(item);</span><br><span class="line">        <span class="keyword">return</span> item.GetSiblings().Where(</span><br><span class="line">            sibling =&gt; </span><br><span class="line">                sibling.TemplateID == item.TemplateID </span><br><span class="line">                &amp;&amp; GetTagIds(sibling).Any(t =&gt; sourceItemTagIds.Contains(t)))</span><br><span class="line">                    .ToArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;ID&gt; <span class="title">GetTagIds</span>(<span class="params">Item sourceItem</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceItem == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(sourceItem));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ((MultilistField)sourceItem.Fields[Foundation.SXA.Templates.Taggable.Fields.SxaTags])?.TargetIDs </span><br><span class="line">            ?? Enumerable.Empty&lt;ID&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Again, nice and simple, just create another <code>Query</code> item and set the <code>Source Type</code> on the page list. If you wanted to get a little more sophisticated, you could modify the above code to use the search API to pull out related items from the search index, this would perform well and also not limit you to only siblings.</p><h3 id="Posibilities"><a href="#Posibilities" class="headerlink" title="Posibilities"></a>Posibilities</h3><p>The posibilities are huge here. There are normally a few times when implementing a Sitecore site where you need to list pages, and its rare that its always as simple as just child pages, or items of the same template. We normally will want to manipulate the data in some way. These <code>code:</code> datasources provide a nice and simple way of doing that, while still using the standard SXA components.</p><p>Also - this doesn’t have to be limited to only using the <code>Page List</code> component. We can use <code>code:datasources</code> with other components too. If you come up with some cool ways of using the <code>code:datasource</code>, link to it in the comments! Enjoy!</p><h3 id="Update-Confused-about-Datasources-You-will-be"><a href="#Update-Confused-about-Datasources-You-will-be" class="headerlink" title="Update: Confused about Datasources? You will be!!"></a>Update: Confused about Datasources? You will be!!</h3><p>So it seems there has been some confusion about whether this is a “new” feature of SXA or whether it has been around for a while (Since Sitecore 7). </p><p>The answer is…. <strong>BOTH</strong></p><p>As <a href="https://twitter.com/jammykam">Kamruz</a> accurately <a href="https://twitter.com/jammykam/status/974824110822907904">points out</a>, the <code>code:Datasource</code> interface (<code>Sitecore.Buckets.FieldTypes.IDataSource</code>) has been around since Sitecore 7, there are some good posts about how it was originally used by <a href="https://community.sitecore.net/technical_blogs/b/sitecorejohn_blog/posts/sitecore-7-custom-classes-as-data-template-field-sources">John West</a> and <a href="https://horizontalintegration.blog/2015/04/02/sitecore-source-field-code-query-that-implements-idatasource/">Brent Svac</a>. </p><p>Kamruz also mentions an option using Sitecore PowerShell Extensions to do the same thing: <a href="https://blog.najmanowicz.com/2013/04/17/powershell-scripted-datasources-in-sitecore-part-1/">PowerShell Scripted Datasources</a>.</p><p>So what is the big deal? The confusion here lies in the way that the term <code>Datasource</code> can mean multiple things in Sitecore.</p><h4 id="Field-Datasource"><a href="#Field-Datasource" class="headerlink" title="Field Datasource"></a>Field Datasource</h4><p>A field datasource, is the source property of a field defined on a data template. These can be used for many things, depending on the field type. From selecting the Rich Text Editor profile, to setting the root element of a <code>TreeList</code>:</p><img src="/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/fielddatasource.png" class="" title="Field Datasource"><h4 id="Component-Datasource"><a href="#Component-Datasource" class="headerlink" title="Component Datasource"></a>Component Datasource</h4><p>A component datasource, is the source that you set on a rendering to define where the data is pulled from for that rendering.</p><img src="/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/componentdatasource.png" class="">]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2018/03/16/Sitecore-SXA-Custom-PageList-data-sources/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore 9 Installation - Could not load file or assembly &#39;ChilkatDotNet46&#39;</title>
      <link>http://www.sitecorenutsbolts.net/2018/03/12/Sitecore-9-Installation-Could-not-load-file-or-assembly-ChilkatDotNet46/</link>
      <guid>http://www.sitecorenutsbolts.net/2018/03/12/Sitecore-9-Installation-Could-not-load-file-or-assembly-ChilkatDotNet46/</guid>
      <pubDate>Mon, 12 Mar 2018 13:25:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;A collegue of mine was onboarding to a Sitecore 9 Update 1 project this week and had this error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could not load file 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>A collegue of mine was onboarding to a Sitecore 9 Update 1 project this week and had this error:</p><blockquote><p>Could not load file or assembly ‘ChilkatDotNet46’ or one of its dependencies. An attempt was made to load a program with an incorrect format.</p></blockquote><p>Ahh - this is an easy one, I thought, he just didn’t read the pre-requisites properly and forgot to install the Visual C++ 2015 Redistributable. I’m sure you will have read at this point that v9.0 update 1 introduced a dependency on this as it is needed by <code>ChilkatDotNet46.dll</code>.</p><p>So I helpfully pointed out that he should make sure all the pre-requistes should be installed!</p><img src="/2018/03/12/Sitecore-9-Installation-Could-not-load-file-or-assembly-ChilkatDotNet46/install1.jpg" class="" title="Yeah... that would be great"><p>But he had already installed the Visual C++ 2015 Redistributable on his machine. After some debugging and seaching around for the same error, the issue looked like it was a mismatch between 32 and 64 bit versions of the file.</p><p>Sitecore is requiring the 64 bit version of <code>ChilkatDotNet46</code>, but for some reason, ASP.NET was finding the 32 bit version. This post from Alex Brown (<a href="http://www.alexjamesbrown.com/blog/development/could-not-load-file-or-assembly-chilkatdotnet2-or-one-of-its-dependencies-an-attempt-was-made-to-load-a-program-with-an-incorrect-format/">Could not load file or assembly ‘ChilkatDotNet2’ or one of its dependencies. An attempt was made to load a program with an incorrect format.</a>) pointed us in the right direction, although he had the reverse issue.</p><p>It turned out that the application pool that was created for the Sitecore 9 instance, had <code>Enable 32-Bit Applications</code> turned on. But default, this is disabled. But for some reason (which we have not yet worked out), on 2 of my collegues machines, it was getting set to true for new application pools:</p><img src="/2018/03/12/Sitecore-9-Installation-Could-not-load-file-or-assembly-ChilkatDotNet46/apppoolsettings.png" class="" title="Setting the Enable 32-Bit"><p>Once we disabled that setting, Sitecore came straight back up and we had no issues. So if you get that error, check your application pool settings and make sure that <code>Enable 32 Bit Applications</code> is disabled!</p><p>– Richard.</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2018/03/12/Sitecore-9-Installation-Could-not-load-file-or-assembly-ChilkatDotNet46/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Share Your Data Between Components</title>
      <link>http://www.sitecorenutsbolts.net/2017/11/02/Share-Your-Data-Between-Components/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/11/02/Share-Your-Data-Between-Components/</guid>
      <pubDate>Thu, 02 Nov 2017 23:35:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Recently there was this blog post about &lt;a href=&quot;https://blog.saberkarmous.nl/2017/11/nine-grievances-that-make-sitecore-a-challenge/&quot;&gt;9 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Recently there was this blog post about <a href="https://blog.saberkarmous.nl/2017/11/nine-grievances-that-make-sitecore-a-challenge/">9 Grievances that make Sitecore development a challenge</a>, and while I agree at times, <del>Sitecore</del> development can be a challenge (although, isn’t that really why we are developers - because of the challenge?), I wanted to address one of the grievances and how to solve that without too much effort.</p><h2 id="Yeah-yeah-everything-is-an-item-But-where’s-my-page"><a href="#Yeah-yeah-everything-is-an-item-But-where’s-my-page" class="headerlink" title="Yeah yeah, everything is an item. But where’s my page?"></a>Yeah yeah, everything is an item. But where’s my page?</h2><img src="/2017/11/02/Share-Your-Data-Between-Components/whereismypageobject.jpg" class="" title="Where is my page?"><p>One of the greivances is that there is no concept of a “Page Object” that you can use to store something. For example, a dashboard that pulls in user information on 3 renderings, because of the way that Sitecore works, each controller action will get that data. So you end up getting the data 3 times. The common answer there would be to cache the data, but that isn’t always the best option and depending on how your cache is invalidated, could lead to stale data being presented on the site.</p><h2 id="How-to-solve-the-problem"><a href="#How-to-solve-the-problem" class="headerlink" title="How to solve the problem?"></a>How to solve the problem?</h2><p>The thing is that if you follow some good development practices, this perceived problem doesn’t have to be a problem at all. Let’s take the example of a dashboard with some user information that we are getting from a CRM. For the purposes here, we assume that the repository to call the CRM is written and called <code>ICRMRepository</code>.</p><p>The first thing to make sure is that we are following good practice and <em>not</em> doing everything in the controller. So we would have a service class that is responsible for getting user CRM data - lets call that <code>IUserCRMService</code>. The interface might look like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUserCRMService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">UserData <span class="title">GetUserData</span>(<span class="params">Guid userId</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What about the implementation, well this can have a dependency on the <code>ICRMRepository</code> and use that to get the data for the user. But instead of just using <code>IUserCRMService</code> as a stateless object, lets add some state to it. Lets add the user object to the service:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUserCRMService</span></span><br><span class="line">&#123;</span><br><span class="line">    UserData User &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetUserId</span>(<span class="params">Guid Id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can implement that:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserCRMService</span> : <span class="title">IUserCRMService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICRMRepository _crmRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserCRMService</span>(<span class="params">ICRMRepository crmRepository</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _crmRepository = crmRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserData User &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUserId</span>(<span class="params">Guid userId</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Validate the user id</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don&#x27;t get the data again if we already have it</span></span><br><span class="line">        <span class="keyword">if</span> (User != <span class="literal">null</span> &amp;&amp; User.UserId == userId)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> crmData = _crmRepository.GetUser(userId);</span><br><span class="line">        User = <span class="keyword">new</span> UserData</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// add model mapping here</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So now we can use the <code>SetUserId</code> to tell the service which user we are getting and then use the <code>User</code> property to get the data. Caveat - this is not supposed to be technically perfect and I’m sure there are neater ways to setup the stateful class, this is just to convey the idea!</p><p>The magic happens when we register the implementation with our container. For this I’ll use Sitecore’s builtin IoC services:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Configurator</span> : <span class="title">IServicesConfigurator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IServiceCollection serviceCollection</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        serviceCollection.AddScoped&lt;IUserCRMService, UserCRMService&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instead of the usual <code>Transient</code> registration, we are using <code>Scoped</code>. This means it is registered as a singleton per web request. So now we can inject that dependency (<code>IUserCRMService</code>) into as many controllers as we want and be sure that the CRM repository is only called once.</p><p>Ah - but what about race conditions? What if a second controller calls the service before the first one finishes? Well that <em>shouldn’t</em> happen in Sitecore, controllers are not called asynchronusly. But we <em>should</em> is never a guarantee! So lets code against that.</p><img src="/2017/11/02/Share-Your-Data-Between-Components/racecondition.gif" class="" title="I" alt="m winning.... Oh no!"><p>Because we are a singleton per web request, we can safely use a lock here and not have to worry about requests blocking other requests coming in. So lets see the updated implementation of <code>IUserCRMService</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserCRMService</span> : <span class="title">IUserCRMService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span> _userLock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICRMRepository _crmRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserCRMService</span>(<span class="params">ICRMRepository crmRepository</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _crmRepository = crmRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserData User &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUserId</span>(<span class="params">Guid userId</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Validate the user id</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">lock</span> (_userLock)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Don&#x27;t get the data again if we already have it</span></span><br><span class="line">            <span class="keyword">if</span> (User != <span class="literal">null</span> &amp;&amp; User.UserId == userId)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> crmData = _crmRepository.GetUser(userId);</span><br><span class="line">            User = <span class="keyword">new</span> UserData</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// add model mapping here</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now if multiple controllers try to set the user Id at the same time, the first will lock and the others will wait until it is complete. The others will then see the <code>User</code> property populated and use that rather than calling the <code>ICRMRepository</code> again.</p><img src="/2017/11/02/Share-Your-Data-Between-Components/youarewelcome.jpg" class=""><p>I’m sure this is only one option of many to solve this problem, but its one that I have used a number of times and had great results with. Feel free to post comments on how you solve this below!</p><ul><li>Richard</li></ul>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/11/02/Share-Your-Data-Between-Components/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore.React - Getting Started - 4. Sitecore Integration</title>
      <link>http://www.sitecorenutsbolts.net/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/</guid>
      <pubDate>Mon, 30 Oct 2017 22:50:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;OPENING-CAVEAT&quot;&gt;&lt;a href=&quot;#OPENING-CAVEAT&quot; class=&quot;headerlink&quot; title=&quot;OPENING CAVEAT&quot;&gt;&lt;/a&gt;OPENING CAVEAT&lt;/h3&gt;&lt;p&gt;So many people have be
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="OPENING-CAVEAT"><a href="#OPENING-CAVEAT" class="headerlink" title="OPENING CAVEAT"></a>OPENING CAVEAT</h3><p>So many people have been asking for this next part in the tutorial series and I apologise for not getting it done sooner. BUT there are valid reasons, so in the interests of full disclosure this is why its taken so long. The main reason is - ReactJS.net appears to not work very well with React 15.5 and above. Most of the reason for this delay is that I cannot get my tutorial repo to work with the versions of react that were used in parts 1-3. That said, it does work with earlier versions of React, so I thought it best right now to at least finish off the tutorial so you can see the Sitecore parts and then hopefully as a collective we can work out the issues with the newer versions of React.</p><p>Another big part of me is wondering about the benefit of this implementation of React with Sitecore now that JSS has gone into tech preview. So let me know if you think this module is still helpful to keep going or whether most of you will just move to JSS once it is available.</p><h2 id="Episode-4-A-New-Hope"><a href="#Episode-4-A-New-Hope" class="headerlink" title="Episode 4 - A New Hope:"></a>Episode 4 - A New Hope:</h2><p>FINALLY!!! We have got to some Sitecore stuffs!! All the front end is in place now and we can start the integration into Sitecore.</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/yayfinally.jpg" class=""><p>This is the 4th tutorial in the series on <a href="https://github.com/GuitarRich/sitecore.react">Sitecore.React</a>. If you have not read the previous 3 yet, start here: <a href="/2017/07/04/Sitecore-React-Getting-Started/" title="Sitecore.React - Getting Started - 1. Webpack">Sitecore.React - Getting Started - 1. Webpack</a> first. This turorial is going to be pretty image heavy to get the Visual Studio part setup!</p><h2 id="Lets-get-the-Sitecore-environment-setup"><a href="#Lets-get-the-Sitecore-environment-setup" class="headerlink" title="Lets get the Sitecore environment setup"></a>Lets get the Sitecore environment setup</h2><p>For the purposes of this tutorial I will assume you are familiar with <a href="https://github.com/Sitecore/Sitecore-Instance-Manager">SIM</a> and have the latest version installed. Using SIM install Sitecore with the following setup:</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/newinstance.png" class="" title="installing the new instance"><p>Once Sitecore is installed we need to install the <a href="https://marketplace.sitecore.net/Modules/S/SitecoreReact.aspx">Sitecore.React</a> package. You can download this from the Sitecore Marketplace: <a href="https://marketplace.sitecore.net/Modules/S/SitecoreReact.aspx">https://marketplace.sitecore.net/Modules/S/SitecoreReact.aspx</a>.</p><p>This package contains the Sitecore templates required to get up and running. Once installed you should see the following templates installed:</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/templates.png" class="" title="Sitcore.React templates"><blockquote><p>Note that the <code>React View Rendering</code> is for a future version, it is not currently supported!</p></blockquote><h2 id="Visual-Studio-Setup"><a href="#Visual-Studio-Setup" class="headerlink" title="Visual Studio Setup"></a>Visual Studio Setup</h2><p>For this tutorial we are going to use <a href="https://twitter.com/AndersLaub">Anders Laub’s</a> awesome Visual Studio templates (<a href="https://marketplace.visualstudio.com/items?itemName=AndersLaublaubplusco.SitecoreHelixVisualStudioTemplates">https://marketplace.visualstudio.com/items?itemName=AndersLaublaubplusco.SitecoreHelixVisualStudioTemplates</a>). If you haven’t used them yet and are building Helix based Sitecore implementations, then I guarantee you need to install them!</p><p>In Visual Studio, create a new project, find the <strong>Sitecore Helix Modules and Solutions</strong>, set the project name and folder setup as follows. <strong>Important - Make sure that the folder you select is the folder where you have been building your Sitecore.React front end project</strong></p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/newproject1.png" class=""><p>On the next screen, set the project up like this:</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/newproject2.png" class=""><p>This will go away and setup all your solution, folders and gulp scripts etc… all along side your existing React application files.</p><p>Using the same templates, add a Project module, a Foundation module and a Feature module. Here are the values you should use for each:</p><hr><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/websiteproject.png" class="" title="Project.Sitecore.React.Website module"><hr><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/foundationproject.png" class="" title="Foundation.React module"><hr><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/featureproject.png" class="" title="Feature.Content module"><hr><p>Once you have set all that up - your visual studio project should look like this:</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/visualstudiosolution.png" class="" title="Visual Studio Solution"><blockquote><p>Alternatively, checkout the <code>gettingstarted-4</code> branch in the tutorial git repository!</p></blockquote><h2 id="Setup-Sitecore-React"><a href="#Setup-Sitecore-React" class="headerlink" title="Setup Sitecore.React"></a>Setup Sitecore.React</h2><p>Now we need to setup <code>Sitecore.React</code> and add the nuget packages. First in the <code>Foundation.React</code> project, add the <code>Sitecore.React.Web</code> nuget package:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> Sitecore.React.Web</span><br></pre></td></tr></table></figure><p>For the other 2 projects, just install the <code>Sitecore.React</code> package:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> Sitecore.React</span><br></pre></td></tr></table></figure><p>The <code>.web</code> version contains all the configuration files for <code>Sitecore.React</code>, so this should go into the foundation project.</p><h3 id="Create-a-default-layout"><a href="#Create-a-default-layout" class="headerlink" title="Create a default layout"></a>Create a default layout</h3><p>Once the references are all setup, we need to create a default layout for Sitecore. This will be the main layout that we use in presentation and the part where we add our react components. It replaces the <code>index.html</code> file from the react application.</p><p>In the <code>Project.Sitecore.React.Website</code> web project, add a <code>DefaultLayout.cshtml</code> razor file to <code>/views/Website/Layout</code>:</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/defaultlayout.png" class="" title="DefaultLayout.cshtml"><p>In here we will copy the contents of the <code>index.html</code> file, but replace the app div element with a Sitecore placeholder. Also we are removing the front end script tag and adding in the script tag from the Sitecore.React module:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@using Sitecore.Mvc</span><br><span class="line">@using Sitecore.React.Configuration</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sitecore React | Front End Files<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//maxcdn.bootstrapcdn.com/bootswatch/3.3.7/sandstone/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-G3G7OsJCbOk1USkOY4RfeX1z27YaWrZ1YuaQ5tbuawed9IoreRDpWpTkZLXQfPm3&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Custom Fonts --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,300italic,400italic,700italic&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  @Html.Sitecore().Placeholder(&quot;app&quot;)</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;@Url.Content(ReactSettingsProvider.Current.ClientScript)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A couple of things here that some have had problems with. Just because I used a single placeholder here and called it <code>app</code> doesn’t mean that you have too - Sitecore.React works just like a standard Sitecore MVC implementation. It has a layout and renderings for each page, renderings are added to placeholder keys - just like a regular MVC Sitecore application.</p><p>Now we need to create the Sitecore item. In the content editor, navigate to <code>/sitecore/layout/Layouts/</code> Create a folder called <code>Project</code> and then create a new <code>MVC Layout</code> item called <code>DefaultLayout</code>. Make sure that the <strong>Path</strong> field is pointing at the razor view we just created.</p><h3 id="Creating-the-Scaffolding"><a href="#Creating-the-Scaffolding" class="headerlink" title="Creating the Scaffolding"></a>Creating the Scaffolding</h3><p>In our React application, the first component we created was the <code>MainLayout.jsx</code> component. This provided some scaffolding for the site. So lets create that one.</p><p>We already have our front end from the ReactJS application we created earlier, so we just need to create the backend. In the <code>Project.Sitecore.React.Website</code> Visual Studio project, lets create a controller for scaffolding elements. (<em>In a proper solution, you may put these scaffolding components in the Common website project or maybe a feature project. We are just using the main website project here for the sake of time and ease of setting up the tutorial</em>)</p><p>First create a <code>ScaffoldingController</code> class in <code>Project.Sitecore.React.Website\Controllers</code> - make sure it inherits from <code>System.Web.Mvc.Controller</code>. Then add an <code>ActionResult</code>, lets call it <code>MainLayout</code>. There is no need for a datasource for this component. We just need the controller rendering for now. Your action result will use the extension method <code>React()</code> to return;</p><blockquote><p>NOTE: Currently view react renderings are not supported with the <code>Sitecore.React</code> module. This is on the roadmap for a future enhancement.</p></blockquote><p>Your controller should look like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Sitecore.React.Mvc.Controllers;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Project.Sitecore.React.Website.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScaffoldingController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">MainLayout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.React(<span class="string">&quot;MainLayout&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next create the <code>React Controller Rendering</code> item in <code>/sitecore/layout/Renderings/Project/Website/MainLayout</code>. You can leave the <code>JSX File</code> field empty for this. Fill in the <code>Controller</code> and <code>Controller Action</code> fields like this:</p><img src="/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/mainlayout.png" class="" title="Main Layout Rendering Item"><p>Notice that instead of returning <code>this.View()</code> we are using <code>this.React()</code> - this is the extension method that tells the application to use the React view engine instead of the razor script view engine.</p><h3 id="Page-Title-amp-Body-Components"><a href="#Page-Title-amp-Body-Components" class="headerlink" title="Page Title &amp; Body Components"></a>Page Title &amp; Body Components</h3><p>Now we can get into creating some data driven components. Remember for our react application, we created <code>Page Title</code> and <code>Page Body</code> components. So lets create those in the <code>Feature.Content</code> project. First create a controller for the components, lets create <code>ContentController</code>, again make sure it derives from <code>System.Web.Mvc.Controller</code>.</p><p>We will create 2 <code>ActionResult</code> methods - <code>PageTitle</code> and <code>PageBody</code>. In this tutorial we wont use an ORM or Mapper, so we will hit the Sitecore API directly. In the <code>Feature.Content</code> Visual Studio project, lets create the controller and add actin result methods for both of the components:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> Feature.Content.Models;</span><br><span class="line"><span class="keyword">using</span> Sitecore.Mvc.Presentation;</span><br><span class="line"><span class="keyword">using</span> Sitecore.React.Mvc.Controllers;</span><br><span class="line"><span class="keyword">using</span> Sitecore.Web.UI.WebControls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Feature.Content.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ContentController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">PageTitle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(RenderingContext.Current.Rendering.DataSource))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> item = RenderingContext.Current.Rendering.Item;</span><br><span class="line">            <span class="keyword">var</span> viewModel = <span class="keyword">new</span> PageTitleViewMode</span><br><span class="line">            &#123;</span><br><span class="line">                PageTitle = FieldRenderer.Render(item, <span class="string">&quot;PageTitle&quot;</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.React(<span class="string">&quot;PageTitle&quot;</span>, viewModel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">PageBody</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(RenderingContext.Current.Rendering.DataSource))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> item = RenderingContext.Current.Rendering.Item;</span><br><span class="line">            <span class="keyword">var</span> viewModel = <span class="keyword">new</span> PageBodyViewTitle</span><br><span class="line">            &#123;</span><br><span class="line">                PageBody = FieldRenderer.Render(item, <span class="string">&quot;PageBody&quot;</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.React(<span class="string">&quot;PageBody&quot;</span>, viewModel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So let’s again break down the 2 controller actions. If you are used to using the Sitecore API directly, this may look fairly familiar, React controller actions are almost identical to a standard MVC controller action. The first parts are fairly standard Sitecore, we are just getting the rendering item. Next we build the view model - here is where it gets a little different. In a standard controller, we might just add the Sitecore field to the view model, or Glass/Fortis/Synthesis model to our view model, and then use the <code>FieldRenderer</code> to render the contents of that field in the razor view.</p><p>The problem is that with React, we can’t put server side code into the <code>jsx</code> comonent. So we are using the <code>FieldRenderer</code> in the controller action and populating our view model with the rendered output of the field. This means that when rendered by React, we still get Experience Editor capabilities.</p><p>Now we need to create the 2 components in Sitecore - in your <code>sitecore/Layout/Renderings/Feature/Content</code> folder, create 2 <code>React Controller Renderings</code> - <code>PageTitle</code> and <code>PageBody</code>. Make sure that the controller and action fields are set with a fully qualified controller. This is what I have: Both renderings have the <code>Controller</code> field set to: <code>Feature.Content.Controllers.ContentController, Feature.Content</code> and then the <code>Action</code> fields set respectively.</p><h3 id="Set-the-Presentation"><a href="#Set-the-Presentation" class="headerlink" title="Set the Presentation"></a>Set the Presentation</h3><p>Make sure you set some presentation and add the components to the <code>app</code> placeholder on the default layout.</p><h3 id="Deploying-the-Code"><a href="#Deploying-the-Code" class="headerlink" title="Deploying the Code"></a>Deploying the Code</h3><p>Finally we can deploy the code. In the github repo I have setup some gulp tasks similar to the Habitat demo ones. There is an extra couple in there to handle deploying the JavaScript and JSX component files to the site.</p><h3 id="Why-are-we-deploying-the-JSX-files"><a href="#Why-are-we-deploying-the-JSX-files" class="headerlink" title="Why are we deploying the JSX files?"></a>Why are we deploying the JSX files?</h3><p>All the JavaScript is in the webpack created files right? So why do we need to copy over the JSX files to the website instance?</p><p>Well, there are 2 main reasons for this:</p><ol><li>First, with the Sitecore.React componenet, it creates a new ViewEngine for ASP.NET MVC. The base view engine in MVC requires you to have a physical (or compiled) view file. It searches for the file and passes this through to the rendering engine of the view. To keep this following a standard MVC view engine pattern, the React View Engine, keeps this default functionality. So if the jsx file doesn’t exist, your component will fail.</li><li>Secondly, to work out where Placeholder are created and also to render out the contents of a placeholder, the Sitecore.React module, parses out the content of the jsx file. This is much simpler to do in a jsx file with a single component in vs trying to parse the entire bundled Javascript file.</li></ol><p>There may be better options for this in the future, but for now - we just need to get those files deployed.</p><h3 id="What-is-next"><a href="#What-is-next" class="headerlink" title="What is next"></a>What is next</h3><p>Well as mentioned earlier, currently this only works with earlier versions of React, so I will be looking into that more if people find value in this module. Also JSS is in tech preview now - so more focus will be on that.</p><p>What do you want to see with Sitecore and React? Lets take the discussion to the Slack channels and see what the future holds!</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/10/30/Sitecore-React-Getting-Started-4-Sitecore-Integration/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore 9: Dynamic Placeholders At Last!</title>
      <link>http://www.sitecorenutsbolts.net/2017/10/17/Sitecore-9-Dynamic-Placeholders-At-Last/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/10/17/Sitecore-9-Dynamic-Placeholders-At-Last/</guid>
      <pubDate>Tue, 17 Oct 2017 12:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/2017/10/17/Sitecore-9-Dynamic-Placeholders-At-Last/soexcited.gif&quot; class=&quot;&quot; title=&quot;I&quot; alt=&quot;m so excited&quot;&gt;
&lt;p&gt;Hell yeah - finally d
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/2017/10/17/Sitecore-9-Dynamic-Placeholders-At-Last/soexcited.gif" class="" title="I" alt="m so excited"><p>Hell yeah - finally dynamic placeholders come out of the box with Sitecore 9. This has probably been one of the most asked for features in Sitecore for a long time. Fortunately there have been a few community modules that have helped in the past. One of the most popular was the <a href="https://github.com/Fortis-Collection/dynamic-placeholders">Fortis Dynamic Placeholders</a> which used the rendering item’s unique Id to generate the placeholder key.</p><h2 id="So-what-does-Dynamic-Placeholders-give-us-now"><a href="#So-what-does-Dynamic-Placeholders-give-us-now" class="headerlink" title="So what does Dynamic Placeholders give us now?"></a>So what does Dynamic Placeholders give us now?</h2><p>At the basic level, you can use dynamic placeholders in the same way as the Fortis ones. Just by adding one to your rendering:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.Sitecore().DynamicPlaceholder(&quot;placeholderKey&quot;)</span><br></pre></td></tr></table></figure><p>But that is just the start of it. Let’s have a deeper dive into some of the more advanced features of the new Dynamic Placeholders:</p><h2 id="Multiple-Placeholders"><a href="#Multiple-Placeholders" class="headerlink" title="Multiple Placeholders"></a>Multiple Placeholders</h2><p>If we look at the overloads for dynamic placeholders we see that there are parameters for <code>count</code> and <code>seed</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.Sitecore().DynamicPlaceholder(<span class="built_in">string</span> placeholderName, <span class="built_in">int</span> count = <span class="number">1</span>, <span class="built_in">int</span> maxCount = <span class="number">0</span>, <span class="built_in">int</span> seed = <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Looking at the documentation <code>count</code> specifies how many placeholders Sitecore will render for that key, <code>seed</code> specifies the starting number that the suffix will use and <code>maxCount</code> limits the number of placeholders that Sitecore will create. Sitecore will use the format: <code>&#123;placeholder key&#125;-&#123;rendering unique suffix&#125;-&#123;unique suffix within rendering&#125;</code>. For example:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content-&#123;7a943e27-b649-400c-986d-33d07f0f50ca&#125;-1</span><br></pre></td></tr></table></figure><p>These extra parameters make the new Dynamic Placeholders very flexible. They no longer just deal with a component containing a placeholer being able to be added to the page multiple times, but also creating multiple placeholders in the same component. We will dig deeper in to why you might want to do that later.</p><h2 id="Modifying-the-Chrome"><a href="#Modifying-the-Chrome" class="headerlink" title="Modifying the Chrome"></a>Modifying the Chrome</h2><p>Another look at the overloads and we can see that there are some methods that allow us to control the markup that wraps each placeholder created by this one call.</p><p>First you can pass a <code>TagBuilder</code>, this is handy, but what if you need to know something about the context of this placeholder? For example the index of this placeholer. Well you can also supply the call a function that returns a <code>TagBuilder</code> object. That function also has a <code>DynamicPlaceholderRenderContext</code> object passed in. This gives you detail about that context of each placeholder as it is added.</p><p>Let’s say that you wanted to build an accordion component, but instead of limiting the content of each accordion, we want to set the accordion content using a placeholder so that we can dynamically build that content. Historically, you would build the markup for the accordion and in the center add your dynamic placeholder implementation.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@foreach(var accordionItem in Model.AccordionItems) &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse accordion-@(accordionItem.Index)&quot;</span>&gt;</span></span><br><span class="line">        Html.Sitecore().Placeholder(&quot;accordion-&quot; + accordionItem.Index)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could make this simpler by using the <code>TagBuilder</code> like this:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Html.Sitecore().DynamicPlaceholder(<span class="string">&quot;accordion&quot;</span>, context =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> tag = <span class="keyword">new</span> TagBuilder(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    tag.AddCssClass(<span class="string">&quot;collapse&quot;</span>)</span><br><span class="line">    tag.AddCssClass(<span class="string">&quot;accordion-&quot;</span> + context.Index)</span><br><span class="line">    <span class="keyword">return</span> tag;</span><br><span class="line">&#125;, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>This will then generate 3 <code>li</code> tags with the class set to <code>collapse accordion-1</code> etc… </p><p>But the <code>TagBuilder</code> can make the markup difficult to read, maybe we want to use more readable markup. We can also do that by using the overload with the <code>outputModifier</code> - this allows us to build a <code>HtmlString</code> object and return it.</p><p>Finally you can also pass in a <code>DynamicPlaceholderDefinition</code> - in both of these you can specify the mark up you want to use to wrap the contents of the placeholder. Here is the above example using that:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Html.Sitecore().DynamicPlaceholder(<span class="keyword">new</span> DynamicPlaceholderDefinition(<span class="string">&quot;accordion&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Count = <span class="number">3</span>,</span><br><span class="line">    MaxCount = <span class="number">10</span>,</span><br><span class="line">    Seed = <span class="number">1</span>,</span><br><span class="line">    OutputModifier = (input, context) =&gt; <span class="keyword">new</span> HtmlString(<span class="string">&quot;&lt;li class=\&quot;collapse accordion-&quot;</span> + context.Index + <span class="string">&quot;\&quot;&gt;&quot;</span> + input + <span class="string">&quot;&lt;/li&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Bringing-this-to-life"><a href="#Bringing-this-to-life" class="headerlink" title="Bringing this to life"></a>Bringing this to life</h2><p>So why is all of this so cool? Well, lets imagine you want to create an accordion or maybe a tabbed component. The content editor will need to be able to specify the number of accordion elememts or tabs and then using the Experience Editor, build out the content.</p><p>Using rendering parameters and dynamic placeholders we can achieve that. Dynamic Placeholders will automatically look for properties on the rendering parameters that follow this pattern: <code>ph_placeholderKey_paramName</code>. This means that to override things like <code>count</code>, <code>seed</code> etc.. you just have to add an additional property to the component properties like this:</p><img src="/2017/10/17/Sitecore-9-Dynamic-Placeholders-At-Last/renderingparams.png" class="" title="Additional Properties"><p>Now 10 placeholders will be created. Note that adding this additional property <em>will</em> override the setting you specified in the razor view, with the exception of the <code>MaxCount</code> property. So if you want your content editors to be able to add/remove placeholders via component properties, it is important to remember to set limits so that things can’t get too crazy.</p><h2 id="Important-Things-to-remember"><a href="#Important-Things-to-remember" class="headerlink" title="Important: Things to remember"></a>Important: Things to remember</h2><p>There are some things to remember when using dynamic placeholders. First, the placeholder only knows about its own call. It does not know about any other dynamic placeholders that might be on the page. Take the following code:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myComponent&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;Section <span class="number">1</span>&lt;/h2&gt;</span><br><span class="line">    @Html.Sitecore().DynamicPlaceholder(<span class="string">&quot;column&quot;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;Section <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">    @Html.Sitecore().DynamicPlaceholder(<span class="string">&quot;column&quot;</span>, <span class="number">2</span>)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>This would be the equivalent of:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myComponent&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;Section <span class="number">1</span>&lt;/h2&gt;</span><br><span class="line">    @Html.Sitecore().Placeholder(<span class="string">&quot;column_&#123;...&#125;_0&quot;</span>)</span><br><span class="line">    @Html.Sitecore().Placeholder(<span class="string">&quot;column_&#123;...&#125;_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;Section <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">    @Html.Sitecore().Placeholder(<span class="string">&quot;column_&#123;...&#125;_0&quot;</span>)</span><br><span class="line">    @Html.Sitecore().Placeholder(<span class="string">&quot;column_&#123;...&#125;_1&quot;</span>)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>The second call to the dynmic placeholders does not know anything about the first. To do this you would need to set the <code>seed</code> property:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myComponent&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;Section <span class="number">1</span>&lt;/h2&gt;</span><br><span class="line">    @Html.Sitecore().DynamicPlaceholder(<span class="string">&quot;column&quot;</span>, count: <span class="number">2</span>, seed: <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;Section <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line">    @Html.Sitecore().DynamicPlaceholder(<span class="string">&quot;column&quot;</span>, count: <span class="number">2</span>, seed: <span class="number">200</span>)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>Now your placeholders will not conflict.</p><h2 id="Updating-from-existing-solutions"><a href="#Updating-from-existing-solutions" class="headerlink" title="Updating from existing solutions"></a>Updating from existing solutions</h2><p>One big question is going to be - How can I update my existing solution to use the Sitecore version? Well stay tuned, that will be the subject of another post.</p><p>– Richard</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/10/17/Sitecore-9-Dynamic-Placeholders-At-Last/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore 9: Upgrading to Dynamic Placeholders</title>
      <link>http://www.sitecorenutsbolts.net/2017/10/17/Sitecore-9-Upgrading-to-Dynamic-Placeholders/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/10/17/Sitecore-9-Upgrading-to-Dynamic-Placeholders/</guid>
      <pubDate>Tue, 17 Oct 2017 12:00:00 GMT</pubDate>
      <description>
      
        
        
          
&lt;p&gt;So with the new Dynamic Placeholders implementation finally here, how can we go about upgrading. Well, a lot depends on which implementa
        
      
      </description>
      
      <content:encoded><![CDATA[<p>So with the new Dynamic Placeholders implementation finally here, how can we go about upgrading. Well, a lot depends on which implementation of Dynamic Placeholders you have used. In this example, we will assume that you have used the <a href="https://github.com/Fortis-Collection/dynamic-placeholders">Fortis</a> module. But the principles used here can also be applied to other implementations.</p><h2 id="What-are-the-differences"><a href="#What-are-the-differences" class="headerlink" title="What are the differences"></a>What are the differences</h2><p>First, we want to see the differences between what Sitecore outputs and what Fortis does.</p><p>The Fortis placeholder generation uses <code>placeholderKey_renderingId</code> as the pattern to generate the key. This gives you keys like this:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_cdff3b6c-c0a7-4d6c-9a48-da82d186804c</span><br></pre></td></tr></table></figure><p>The Sitecore implementation is very similar, but formats the Guid differently and also adds a unique key like this</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_&#123;CDFF3B6C-C0A7-4D6C-9A48-DA82D186804C&#125;_0</span><br></pre></td></tr></table></figure><h2 id="Updating-the-module"><a href="#Updating-the-module" class="headerlink" title="Updating the module"></a>Updating the module</h2><p>When dealing with the project, the first thing to do will be to remove the Dynamic Placeholder binary and config from your solution. You can uninstall the nuget package for this.</p><p>In your deployed instance, you will need to make sure that the following files are removed:</p><ul><li><code>\App_Config\Include\DynamicPlaceholders\DynamicPlaceholders.config</code></li><li><code>\bin\DynamicPlaceholders.dll</code></li></ul><h2 id="Updating-the-code"><a href="#Updating-the-code" class="headerlink" title="Updating the code"></a>Updating the code</h2><p>Once those files have been removed we need to make sure that all code referencing the namespace is changed to the new Sitecore namespace. So a search and remove this namespace: <code>DynamicPlaceholders.Mvc.Extensions</code> in your code. If you have used <a href="mailto:`@Html.Sitecore">`@Html.Sitecore</a>()<code>in your razor views, you probably already have the namespace set correctly. If not, make sure you have these namespaces added to your views</code>web.config`:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">&quot;Sitecore.Mvc&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">&quot;Sitecore.Mvc.Presentation&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Once we have done that, most of the code should work in the razor views. Unless you have used the overload and passed in a unique key to the Fortis ones. All the calls to <a href="mailto:`@Html.Sitecore">`@Html.Sitecore</a>().DynamicPlaceholder()` will just be calling the default overload with the placeholder key.</p><h2 id="Update-your-presentation"><a href="#Update-your-presentation" class="headerlink" title="Update your presentation"></a>Update your presentation</h2><p>The big problem now is going to be your presentation in Sitecore. Because the format of the placeholder key has changed, all the existing renderings will need thier placeholder keys updating too. In a small implementation, you might be able to manually do this, but that wil take a long time!</p><h3 id="Sitecore-PowerShell-Extensions-to-the-rescue"><a href="#Sitecore-PowerShell-Extensions-to-the-rescue" class="headerlink" title="Sitecore PowerShell Extensions to the rescue"></a>Sitecore PowerShell Extensions to the rescue</h3><p>That is a phrase that have used so many times! SPE is going to help a lot here. If you have never used <a href="https://marketplace.sitecore.net/Modules/Sitecore_PowerShell_console.aspx?sc_lang=en">Sitecore Powershell Extensions</a> - go download it now!</p><img src="/2017/10/17/Sitecore-9-Upgrading-to-Dynamic-Placeholders/doitnow.gif" class="" title="Just do it now!"><p>With SPE we can recurse through the content tree and update the presentation details. So lets look at a script that we can use to do that:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$startPath</span> = <span class="string">&quot;/sitecore/content&quot;</span></span><br><span class="line"><span class="variable">$placeholderKey</span> = <span class="string">&quot;main_*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Progress</span> <span class="literal">-Activity</span> <span class="string">&quot;Upgrading dynamic placeholders that for the key [<span class="variable">$</span>(<span class="variable">$placeholderKey</span>)]&quot;</span> `</span><br><span class="line">    <span class="literal">-Status</span> <span class="string">&quot;Getting content items&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-ChildItem</span> <span class="literal">-Path</span> <span class="variable">$startPath</span> <span class="literal">-Recurse</span> | <span class="built_in">ForEach-Object</span> &#123;</span><br><span class="line">    <span class="variable">$item</span> = <span class="variable">$_</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Progress</span> <span class="literal">-Activity</span> <span class="string">&quot;Upgrading dynamic placeholders that for the key [<span class="variable">$</span>(<span class="variable">$placeholderKey</span>)]&quot;</span> `</span><br><span class="line">        <span class="literal">-CurrentOperation</span> <span class="string">&quot;Updating [<span class="variable">$</span>(<span class="variable">$item</span>.Name)]...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Get-Rendering</span> <span class="literal">-Item</span> <span class="variable">$_</span>  <span class="literal">-Placeholder</span> <span class="variable">$placeholderKey</span> | <span class="built_in">Foreach-Object</span> &#123;</span><br><span class="line">        <span class="comment"># Double check that this is an old style dynamic placeholder - should have a lowercase guid at the end of the string</span></span><br><span class="line">        <span class="variable">$matches</span> = [<span class="type">regex</span>]::Matches(<span class="variable">$_</span>.Placeholder,<span class="string">&#x27;([0-9a-f]&#123;8&#125;[-][0-9a-f]&#123;4&#125;[-][0-9a-f]&#123;4&#125;[-][0-9a-f]&#123;4&#125;[-][0-9a-f]&#123;12&#125;)$&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$matches</span>.Success) &#123;</span><br><span class="line">            <span class="variable">$renderingId</span> = <span class="variable">$matches</span>.Groups[<span class="number">0</span>].Value</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Replace the old style guid with the new style guid and add the unique number</span></span><br><span class="line">            <span class="comment"># for this upgrade, that will always be 0</span></span><br><span class="line">            <span class="variable">$newPlaceholder</span> = <span class="variable">$_</span>.Placeholder.Replace(<span class="variable">$renderingId</span>, <span class="string">&quot;&#123;<span class="variable">$</span>(<span class="variable">$renderingId</span>.ToUpper())&#125;_0&quot;</span>)</span><br><span class="line">            <span class="variable">$_</span>.Placeholder = <span class="variable">$newPlaceholder</span></span><br><span class="line">            <span class="built_in">Set-Rendering</span> <span class="literal">-Item</span> <span class="variable">$item</span> <span class="literal">-Instance</span> <span class="variable">$_</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Progress</span> <span class="literal">-Completed</span> <span class="literal">-Activity</span> <span class="string">&quot;Done&quot;</span></span><br></pre></td></tr></table></figure><p>This is a very basic script. First, set your start item. The script will recurse through the content tree from there and find all renderings that are in a placeholder that match the pattern in <code>$placeholderKey</code> - use a wildcard to find all dynamic placeholders.</p><p>Then for each rendering, we double check that the key contains a guid in the format of the old implementation - this will be the last element of the string and a lowercase guid with no braces.</p><p>Next, we build the new format placeholder key and set that on the rendering.</p><p>This script will need to be run as an admin user in Sitecore and depending on your content tree, could take a while to run. Future options would be to make this cope with more than just a single placeholder key per pass. But its a good place to start. Run this script for every dynamic placeholder key you have in your solution. Once done, you should be upgraded.</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>This is just one way that an upgrade could be done. If you don’t want to use SPE (What is wrong with you?) - the same approach could be used with some custom C# code. Whichever way you do it, upgrading to the new Sitecore Dynamic Placeholders is a pretty simple task and you can then get the benefits of the new additions.</p><p>Of course - upgrading is just the first step. Once you have done this, you really should look at how you have used Dynamic Placeholders and see whether you should change that based on some of the new features not previously available.</p><p>– Richard</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/10/17/Sitecore-9-Upgrading-to-Dynamic-Placeholders/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Sitecore Stack Exchange 5K Club!</title>
      <link>http://www.sitecorenutsbolts.net/2017/09/25/The-Sitecore-Stack-Exchange-5K-Club/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/09/25/The-Sitecore-Stack-Exchange-5K-Club/</guid>
      <pubDate>Mon, 25 Sep 2017 18:35:53 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/2017/09/25/The-Sitecore-Stack-Exchange-5K-Club/sselogo.png&quot; class=&quot;&quot; title=&quot;Sitecore Stack Exchange&quot;&gt;
&lt;p&gt;&lt;strong&gt;September 13th 2
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/2017/09/25/The-Sitecore-Stack-Exchange-5K-Club/sselogo.png" class="" title="Sitecore Stack Exchange"><p><strong>September 13th 2016</strong> - this was the date that <a href="http://sitecore.stackexchange.com">Sitecore Stack Exchange</a> went public! To celebrate our first year, the SSE moderators (<a href="https://sitecore.stackexchange.com/users/73/mark-cassidy">Mark Cassidy</a>, <a href="https://sitecore.stackexchange.com/users/104/dmytro-shevchenko">Dmytro Shevchenko</a> and <a href="https://sitecore.stackexchange.com/users/70/richard-seal">me</a>) wanted to give something back to those that have worked hard over the last 12 months to make the site what it is today.</p><p>I has been amazing to see how the community has pooled their knowledge and resources to make SSE what it is today, and with 2419 total users, we have all had a busy year! We would have loved to get something for all of you, but we had to pick a line somewhere, so this is a little something to all those that have made it to 5k and above reputation points. To say thank you for how much effort it takes and for all that you give back to the community.</p><p>So its great to announce the <strong>SSE 5K Club T-Shirts</strong> - behold the glory (<em>can you tell we are all developers, not designers!</em>):</p><img src="/2017/09/25/The-Sitecore-Stack-Exchange-5K-Club/SSETShirts.jpg" class="" title="Sitecore Stack Exchange - 5K Club"><p>First things - a HUGE thank you to Klaus Peterson and the team at <a href="http://www.alpha-solutions.dk">Alpha Solutions Denmark</a> and <a href="http://www.alpha-solutions.us">Alpha Solutions USA</a> for Sponsoring the shirt. We really appreciate the support guys! Eveyone make sure to thank them at Symposium! Without their support, we would not have been able to do this.</p><blockquote><p><em>Wear them with pride - you guys earned them the hard way!!</em> <br /><br>– Klaus Peterson - Alpha Solutions DK</p></blockquote><p>For those that are already at 5k or above - we will be handing out the shirts at Symposium. For all you that are getting close! Keep up the good work. With the generous sponsorship by Alpha Solutions, it enabled us to order a number of 5K Club shirts. So as more users hit that mark, we will contact you and get a shirt sent out to you as a token of our thanks for your on going support for the community.</p><p>If you have no idea what <a href="http://sitecore.stackexchange.com">Sitecore Stack Exchange</a> is - come and join us! It is the best place to get answers to questions you might have on Sitecore, Sitecore Development, xDB and much more. We have an awesome community - come and join us!</p><div class="video-container"><iframe src="https://www.youtube.com/embed/4QnS0X_6r8I" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/09/25/The-Sitecore-Stack-Exchange-5K-Club/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Getting to the FXM Beacon using TLS 1.2</title>
      <link>http://www.sitecorenutsbolts.net/2017/07/24/Getting-to-the-FXM-Beacon-using-TLS-1-2/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/07/24/Getting-to-the-FXM-Beacon-using-TLS-1-2/</guid>
      <pubDate>Mon, 24 Jul 2017 18:45:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;I have recently been playing around with FXM - I do like how simple it is to setup and get running. But I hit an issue when trying to con
        
      
      </description>
      
      <content:encoded><![CDATA[<p>I have recently been playing around with FXM - I do like how simple it is to setup and get running. But I hit an issue when trying to connect FXM to a client site that had been secured using a certificate that used TLS 1.2 security protocal.</p><p>When FxM tried to search for the beacon JavaScript or when its trying to load in the pages for Experience Editor:</p><blockquote><p>47456 14:38:10 ERROR The request was aborted: Could not create SSL/TLS secure channel. Exception: System.Net.WebException Message: The request was aborted: Could not create SSL/TLS secure channel. Source: System at System.Net.WebClient.DownloadDataInternal(Uri address, WebRequest&amp; request) at System.Net.WebClient.DownloadString(Uri address) at Sitecore.FXM.Service.Abstractions.WebClientWrapper.Download(Uri address) at Sitecore.FXM.Service.Controllers.BeaconController.Ping(Uri address)</p></blockquote><p>At first I thought there may be an issue with the cerificate, but that worked fine in browsers. So using the Sitecore developers favorite tool - dotPeek (or other decompiler) - I started tracing the code where the error was occuring.</p><h2 id="The-Sea-of-Dissapointment"><a href="#The-Sea-of-Dissapointment" class="headerlink" title="The Sea of Dissapointment"></a>The Sea of Dissapointment</h2><p>It turns out that FXM just uses a simple <code>WebClient</code> call to download the target html serverside and then it uses that to check for the beacon script and/or to load in the Experience Editor. Here is the code:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Sitecore.FXM.Service.Abstractions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebClientWrapper</span> : <span class="title">IWebClient</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> WebClient client;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WebClientWrapper</span>(<span class="params">WebClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.client = client;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Download</span>(<span class="params">Uri address</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.client.DownloadString(address);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (WebException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The problem here is that by default, the <code>System.Net.WebClient</code> class uses <code>System.Net.ServicePointManager.SecurityProtocal</code> to control which security protocal version to use when creating the request object. By default this is set to <code>SecurityProtocolType.Tls|SecurityProtocolType.Ssl3</code> in .Net 4.0/4.5 - adding <code>SecurityProtocolType.Tls12</code> to this solves the issue - but where to add that.</p><p>I got excited at first, because this class is in the <code>Sitecore.FXM.Service.Abstractions</code> and implements an interface <code>IWebClient</code> - Bingo! I can just write a new implementation of that class, set the security protocal and register it instead of the standard Sitecore one. </p><img src="/2017/07/24/Getting-to-the-FXM-Beacon-using-TLS-1-2/dissapointed.jpg" class="" title="Nope!"><p>How silly of me! I guess the FXM team haven’t got to fully implementing DI yet. Looking at the list of registrations in Sitecore (<code>/sitecore/admin/showserviceconfig.aspx</code>), the <code>IWebClient</code> and <code>WebClientWrapper</code> classes were not listed. Then looking at the <code>BeaconController</code> - which did have dependencies injected into the constructor, there was another constructor doing poor mans DI:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BeaconController</span>(<span class="params">IRepository&lt;BeaconEntity&gt; repository</span>)</span></span><br><span class="line"><span class="function">   : <span class="title">this</span>(<span class="params">repository, (ILog</span>) <span class="keyword">new</span> <span class="title">LogWrapper</span>(<span class="params"></span>), (<span class="params">ICorePipeline</span>) <span class="keyword">new</span> <span class="title">CorePipelineWrapper</span>(<span class="params"></span>), (<span class="params">ITrackerProvider</span>) <span class="keyword">new</span> <span class="title">TrackerProviderWrapper</span>(<span class="params"></span>), (<span class="params">ISitecoreContext</span>) <span class="keyword">new</span> <span class="title">SitecoreContextWrapper</span>(<span class="params"></span>), (<span class="params">ISettings</span>) <span class="keyword">new</span> <span class="title">SettingsWrapper</span>(<span class="params"></span>), (<span class="params">IRequestHelper</span>) <span class="keyword">new</span> <span class="title">RequestHelper</span>(<span class="params"></span>), (<span class="params">HttpContextBase</span>) <span class="keyword">new</span> <span class="title">HttpContextWrapper</span>(<span class="params">HttpContext.Current</span>), (<span class="params">IWebClient</span>) <span class="keyword">new</span> <span class="title">WebClientWrapper</span>(<span class="params"><span class="keyword">new</span> WebClient(</span>)), (<span class="params">ITrackingManager</span>) <span class="keyword">new</span> <span class="title">TrackingManager</span>(<span class="params">(ICorePipeline</span>) <span class="keyword">new</span> <span class="title">CorePipelineWrapper</span>(<span class="params"></span>), (<span class="params">ITrackerProvider</span>) <span class="keyword">new</span> <span class="title">TrackerProviderWrapper</span>(<span class="params"></span>), (<span class="params">ISitecoreContext</span>) <span class="keyword">new</span> <span class="title">SitecoreContextWrapper</span>(<span class="params"></span>)))</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>There doesn’t seem to be a good place in any of the FXM code to set the security protocal.</p><h2 id="Good-Old-Initialize-Pipeline"><a href="#Good-Old-Initialize-Pipeline" class="headerlink" title="Good Old Initialize Pipeline!"></a>Good Old Initialize Pipeline!</h2><p>Fortunately - the <code>System.Net.ServicePointManager</code> class is a static class (<em>never thought I’d hear myself saying that!</em>) - So if we set that protocal when the application initializes, as long as nothing else changes it back, we should be good. So thats what I did. Create a simple <code>initialize</code> pipeline processor and set the protocal:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Sitecore.Foundation.SitecoreExtensions.Pipelines.Initialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System.Net;</span><br><span class="line">    <span class="keyword">using</span> Sitecore.Diagnostics;</span><br><span class="line">    <span class="keyword">using</span> Sitecore.Pipelines;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SetupSecurityProtocol</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params">PipelineArgs args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Log.Info(<span class="string">&quot;Setting SecurityProtocol to include TLS 1.2&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            ServicePointManager.SecurityProtocol = ServicePointManager.SecurityProtocol | SecurityProtocolType.Tls12;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that, I’m keeping the original values too - this makes sure that it will still work with other versions of TLS or SSL.</p><p>Now patch that in:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">xmlns:patch</span>=<span class="string">&quot;http://www.sitecore.net/xmlconfig/&quot;</span> <span class="attr">xmlns:set</span>=<span class="string">&quot;http://www.sitecore.net/xmlconfig/set/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitecore</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pipelines</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">initialize</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">processor</span> <span class="attr">type</span>=<span class="string">&quot;Sitecore.Foundation.SitecoreExtensions.Pipelines.Initialize.SetupSecurityProtocol, Sitecore.Foundation.SitecoreExtensions&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">initialize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pipelines</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitecore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And finally - FXM can now create the connection correctly to a website certified with the TLS 1.2 protocal!</p><p>Hopefully this will help someone out there who has the same issue!</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/07/24/Getting-to-the-FXM-Beacon-using-TLS-1-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore.React - Getting Started - 3. Data</title>
      <link>http://www.sitecorenutsbolts.net/2017/07/11/Sitecore-React-Getting-Started-3-Data/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/07/11/Sitecore-React-Getting-Started-3-Data/</guid>
      <pubDate>Tue, 11 Jul 2017 16:45:57 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This is the 3rd tutorial in the series on &lt;a href=&quot;https://github.com/GuitarRich/sitecore.react&quot;&gt;Sitecore.React&lt;/a&gt;. If you have not read
        
      
      </description>
      
      <content:encoded><![CDATA[<p>This is the 3rd tutorial in the series on <a href="https://github.com/GuitarRich/sitecore.react">Sitecore.React</a>. If you have not read the previous 2 yet, read this <a href="/2017/07/04/Sitecore-React-Getting-Started/" title="Sitecore.React - Getting Started - 1. Webpack">Sitecore.React - Getting Started - 1. Webpack</a> and this <a href="/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/" title="Sitecore.React - Getting Started - 2. Creating Components">Sitecore.React - Getting Started - 2. Creating Components</a> first.</p><p>All the code for this tutorial can be found here: <a href="https://github.com/GuitarRich/sitecore.react.tutorial/tree/getting-started-3">https://github.com/GuitarRich/sitecore.react.tutorial/tree/getting-started-3</a>.</p><p>In this tutorial we will be taking the fairly static site that we built in the previous 2 tutorials and make them dynamic - this is an important step in the process of building a react site that can be rendered by Sitecore. By the end of this tutorial we will be ready to start work on the Sitecore parts and integrate the React components as Sitecore renderings.</p><h2 id="Defining-the-data-structure"><a href="#Defining-the-data-structure" class="headerlink" title="Defining the data structure"></a>Defining the data structure</h2><p>The 2 renderings we created in the previous tutorial were the <code>PageTitle</code> and the <code>PageBody</code> components, in Sitecore these will both render fields on a template called <code>PageContent</code>. So lets use a JSON object to define the structure of that data template. Normally this would be something the backend and front end developers would agree upon before building the components.</p><p>Depending on your style of architecture, this data structure can either match exactly with the data template (<em>For simplicity, that is what I am doing here</em>), or a more common/better approach would be to create data structures that will match your view model. This is a better practice so that you are not passing in un-needed properties through to the view (react component).</p><p>Here we are defining some standard fields that might be used on a <code>PageContent</code> template:</p><h3 id="PageContent-data-template"><a href="#PageContent-data-template" class="headerlink" title="PageContent data template:"></a><code>PageContent data template:</code></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Title&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Summary&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Body&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;PageImage&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have a defined structure for the data template, lets create a data layer for our React front end website. This layer will <em>only</em> be used for the frond end site and will be replaced by Sitecore for the main implementation. Because of this, the data layer should <em>ONLY</em> be referenced in our <code>Page</code> components and never in the actual components. </p><p>Remember that the <code>Page</code> components (<em>located in <code>src/app/pages</code></em>) are effectively a JavaScript representation of the Sitecore presentation layer, a <code>PageComponent</code> will bring together the structure of the components (Presentation details) with the data (Content) and present it to the user.</p><p>For the first step, lets create a <code>data</code> folder under <code>src/app</code> to store our data in. Inside that create a folder called <code>json</code> and a file called <code>data.js</code>. It should look like this:</p><img src="/2017/07/11/Sitecore-React-Getting-Started-3-Data/foldersetup.png" class="" title="Data folder setup"><p>The <code>data.js</code> file will contain a static class that will be used to mimic how Sitecore.React passes the data through to the props of the React components. We will add some static methods in there that return a json object containing the data structure with some dummy data in.</p><p>First lets create the dummy <code>PageContent</code> data for the home page. In the <code>src/app/data/json</code> folder, create a file called <code>homePageContent.json</code> and add the following content:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Title&quot;</span>: <span class="string">&quot;Getting Started with Sitecore.React&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Summary&quot;</span>: <span class="string">&quot;Getting Started with Sitecore.React Summary Text&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Body&quot;</span>: <span class="string">&quot;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur ipsum lacus, mattis auctor dolor vitae, porttitor efficitur ex. Pellentesque convallis ante a purus maximus, a ornare neque faucibus. Curabitur dolor magna, dictum non pulvinar convallis, luctus vitae augue. Aenean a nulla nec metus euismod dignissim vitae nec ipsum. Mauris at purus eget mi pellentesque pharetra. Aenean mi eros, euismod sed efficitur vitae, egestas sed enim. Suspendisse potenti. Ut elementum nisl et ligula pellentesque accumsan. Proin varius convallis odio sed congue. Cras finibus felis eget odio lobortis pellentesque vel et eros. Morbi tincidunt tellus a justo porttitor, eu malesuada mi mollis. Nunc vulputate ipsum at tortor tristique semper. Morbi sit amet metus ac quam scelerisque pellentesque.&lt;/p&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;PageImage&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Creating-the-Data-Access-Layer"><a href="#Creating-the-Data-Access-Layer" class="headerlink" title="Creating the Data Access Layer"></a>Creating the Data Access Layer</h2><p>Now we need to create the data access layer and setup the <code>home</code> page component to pass the data into the <code>PageTitle</code> and <code>PageBody</code> react components. First lets look at <code>data.js</code>. Add the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getData</span>(<span class="params">templateName, callback</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> jsonUrl = <span class="string">&quot;/data/json/&quot;</span> + templateName + <span class="string">&quot;.json&quot;</span>;</span><br><span class="line">        fetch(jsonUrl)</span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">            .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                callback(data);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we are just creating a generic function that can be used to load in some json from a file. Because the app runs from <code>src/app</code>, we are making sure the url is correct when running under the webpack server, then using <code>fetch</code> to get the data. The response is converted to a json object and passed through to the callback.</p><p>Next we need to call that from the <code>Home.jsx</code> page. First here is the updated code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PageTitle <span class="keyword">from</span> <span class="string">&quot;../views/PageContent/PageTitle&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageBody <span class="keyword">from</span> <span class="string">&quot;../views/PageContent/PageBody&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data <span class="keyword">from</span> <span class="string">&quot;../data/data&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            pageContent: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        Data.getData(<span class="string">&quot;pageContent&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                pageContent: data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;PageTitle data=&#123;<span class="built_in">this</span>.state.pageContent&#125; /&gt;</span><br><span class="line">                &lt;PageBody data=&#123;<span class="built_in">this</span>.state.pageContent&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What has changed? First we need to import the <code>Data</code> class:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data <span class="keyword">from</span> <span class="string">&quot;../data/data&quot;</span>;</span><br></pre></td></tr></table></figure><p>First we need to setup the components <code>state</code> object to have a propery for the data. To do this we have created a constructor for the <code>Home</code> class. We have to make sure that we still run the base constructor and pass <code>props</code> into there. Then we setup the initial <code>state</code> object. Here we have just added a propery called <code>pageContent</code>.</p><p>Now we can access the static <code>Data.getData</code> function we created earlier and pass in the name of the json file we want to get. In the <a href="https://facebook.github.io/react/docs/react-component.html#componentdidmount"><code>componentDidMount</code></a> method, we call the <code>Data.getData</code> method and which gets the data and then we set the <code>pageContent</code> property on the components <code>state</code> object to hold the returned json object.</p><p><code>componentDidMount</code> is an event on a react component that is invoked immediately after a component is mounted, this is a standard place to load data in a react component.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Data.getData(<span class="string">&quot;pageContent&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        pageContent: data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Finally, you will see that we have passed in the <code>this.state.pageContent</code> object as a prop of the <code>PageTitle</code> and <code>PageBody</code> components called <code>data</code>. This is important as the Sitecore.React code will also pass in the view model to the component as a prop called <code>data</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PageTitle</span> <span class="attr">data</span>=<span class="string">&#123;this.state.pageContent&#125;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PageBody</span> <span class="attr">data</span>=<span class="string">&#123;this.state.pageContent&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Setting-Up-The-Components"><a href="#Setting-Up-The-Components" class="headerlink" title="Setting Up The Components"></a>Setting Up The Components</h2><p>Now we need to setup our components to use those props. When we left them last time they just contained static html in the <code>render</code> method. So lets update the components to render the content from the <code>props</code> instead of the static html. Here is the new code for the components:</p><h3 id="PageTitle"><a href="#PageTitle" class="headerlink" title="PageTitle"></a><code>PageTitle</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;h1 dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>: <span class="built_in">this</span>.props.data.Title&#125;&#125;&gt;&lt;/h1&gt;</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="PageBody"><a href="#PageBody" class="headerlink" title="PageBody"></a><code>PageBody</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBody</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>: <span class="built_in">this</span>.props.data.Body &#125;&#125;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Danger-Danger"><a href="#Danger-Danger" class="headerlink" title="Danger, Danger!"></a>Danger, Danger!</h3><p>One of the things you may have noticed is the <code>dangerouslySetInnerHTML</code> part when rendering the fields. Why are we doing it that way instead of just using the property? The reason is that React, like Razor script, html encodes all content rendered to the page from a prop. This prevents things like injection attacks etc… But for some sitecore fields and also for Experience Editor support, we need those fields rendered <em>without</em> being html encoded. This is what <code>dangerouslySetInnerHTML</code> does, it renders the contents of the field as they are. Its the React equivalent of <a href="mailto:`@Html.Raw">`@Html.Raw</a>()`. So if you want to render rich text fields and have Experience Editor support, it is important to let your front end developers know that they need to do that.</p><h2 id="Final-Setup-for-Sitecore"><a href="#Final-Setup-for-Sitecore" class="headerlink" title="Final Setup for Sitecore"></a>Final Setup for Sitecore</h2><p>We are finally in a place now where we can start to integrate this with Sitecore. But before we do, we have a couple of setup things to do with our JavaScript files. Remember that we setup webpack to generate 3 files: <code>fed.js</code>, <code>server.js</code> and <code>client.js</code>. Up to now we have only worked with <code>fed.js</code> - now we need to setup <code>server.js</code> and <code>client.js</code>.</p><p>First what is the difference? Why do we need 2 files? Well <code>server.js</code> is going to be used on… yup, the server. It will be used by <a href="https://reactjs.net/">ReactJS.Net</a> to render the react components server side. Because of this, it must not contain any code that would manipulate DOM elements that runs on page initialization (<em>Things like button click handlers, responding to events etc… are ok, just nothing on initialization</em>). This is what the <code>client.js</code> file is for. Any DOM manipulation that needs to happen on page initialization should go here.</p><p>Before we add code to those files, lets create a helper script so we don’t have to do things multiple times. In the folder <code>src/app/views</code> create a file called <code>index.js</code>. This file is going to export all our React components.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    MainLayout: <span class="built_in">require</span>(<span class="string">&#x27;./layout/MainLayout&#x27;</span>),</span><br><span class="line">    Placeholder: <span class="built_in">require</span>(<span class="string">&#x27;sitecore.react.placeholders&#x27;</span>),</span><br><span class="line">    PageTitle: <span class="built_in">require</span>(<span class="string">&#x27;./PageContent/PageTitle&#x27;</span>),</span><br><span class="line">    PageBody: <span class="built_in">require</span>(<span class="string">&#x27;./PageContent/PageBody&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can use that in both <code>server.js</code> and <code>client.js</code>. Here is the code for <code>server.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All JavaScript in here will be loaded server-side</span></span><br><span class="line"><span class="comment">// Export the views globally so ReactJS.Net can use them</span></span><br><span class="line"><span class="keyword">var</span> Components = <span class="built_in">require</span>(<span class="string">&#x27;expose-loader?Components!./views&#x27;</span>);</span><br></pre></td></tr></table></figure><p>We are just adding all the components exported by <code>./views/index.js</code> into a global variable called <code>Components</code>. This will be used by ReactJS.Net later.</p><p>And <code>client.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">global</span>.jQuery = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;bootstrap&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;jquery-ui&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Components = <span class="built_in">require</span>(<span class="string">&#x27;expose-loader?Components!./views&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Notice that in here we have added in things like <code>bootstrap</code> and <code>jquery</code> - we would also import any extra classes that are needed on the client only here.</p><p>Finally lets run our dev server and see how it looks. Go to your console and run <code>npm run dev</code>. Your site should now look like this:</p><img src="/2017/07/11/Sitecore-React-Getting-Started-3-Data/website.png" class=""><p>If you install the <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">React DevTools Chrome extension</a> you can open the <code>React</code> tab in Chromes developer tools and see the components listed there:</p><img src="/2017/07/11/Sitecore-React-Getting-Started-3-Data/devtools.png" class=""><p>In the next tutorial, we will finally get into some Sitecore code, build the renderings and look at how we integrate the front end react site.</p><hr><p>This is the third article in a series of tutorials on Sitecore.React:</p><ol><li><a href="/2017/07/04/Sitecore-React-Getting-Started/" title="Sitecore.React - Getting Started - 1. Webpack">Sitecore.React - Getting Started - 1. Webpack</a></li><li><a href="/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/" title="Sitecore.React - Getting Started - 2. Creating Components">Sitecore.React - Getting Started - 2. Creating Components</a></li><li><a href="/2017/07/11/Sitecore-React-Getting-Started-3-Data/" title="Sitecore.React - Getting Started - 3. Data">Sitecore.React - Getting Started - 3. Data</a></li></ol><p>If you have any questions - feel free to hit me up on <a href="https://sitecorechat.slack.com">Sitecore Slack</a> - my user is @GuitarRich!</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/07/11/Sitecore-React-Getting-Started-3-Data/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore.React - Getting Started - 2. Creating Components</title>
      <link>http://www.sitecorenutsbolts.net/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/</guid>
      <pubDate>Wed, 05 Jul 2017 23:44:47 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;This is the second in a series of posts looking at how to use the &lt;a href=&quot;https://github.com/GuitarRich/sitecore.react&quot;&gt;Sitecore.React v
        
      
      </description>
      
      <content:encoded><![CDATA[<p>This is the second in a series of posts looking at how to use the <a href="https://github.com/GuitarRich/sitecore.react">Sitecore.React v2</a> module. If you haven’t read the first post yet, I suggest you start here: <a href="/2017/07/04/Sitecore-React-Getting-Started/" title="Sitecore.React - Getting Started - 1. Webpack">Sitecore.React - Getting Started - 1. Webpack</a>.</p><p>All the code for this tutorial can be found here: <a href="https://github.com/GuitarRich/sitecore.react.tutorial/tree/getting-started-2">https://github.com/GuitarRich/sitecore.react.tutorial/tree/getting-started-2</a>.</p><p>For this second post we will look at creating React components that are going to be compatible with Sitecore.React, how we setup the main JavaScript files and also how to setup the data structure to match what will be coming from Sitecore.</p><p>Again, I will make the assumption that you already know a bit about ReactJS and the syntax involved in creating components etc… so I will not be explaining those portions of the example code.</p><h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><p>Before we can start building Sitecore components with Placeholder support, we need to install the <code>sitecore.react.placholders</code> react module. In your console run the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sitecore.react.placeholders --save-dev</span><br></pre></td></tr></table></figure><p>In your <code>package.json</code> file, you should see this <code>&quot;sitecore.react.placeholders&quot;: &quot;^2.0.0&quot;,</code> in the <code>devDependencies</code> section.</p><p>We can now import placeholders into our react components. So lets create a layout.</p><h2 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h2><p>In Sitecore one of the first things we do is create a main layout. With a React site, our main layout in Sitecore will be slightly different, unlike a normal Mvc layout, our layout will just contain a single placeholder called <strong>app</strong>, this is where the react application will be rendered too. So we need a layout creating as a rendering where we place our main page scaffolding. So lets create a React component for that.</p><p>In our last tutorial we created our main source folders. For this tutorial we will work in the <code>src/App</code> folder. Create a new folder in <code>src/App</code> called <code>views</code>, then create a folder inside that one called <code>layout</code>.</p><p>In this folder we will create the <code>MainLayout.jsx</code> component. Here is the code for the main layout:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLayout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div id=<span class="string">&quot;main-container&quot;</span>&gt;</span><br><span class="line">                &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;navbar navbar-default navbar-static-top container-fluid&quot;</span>&gt;</span><br><span class="line">                &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;main role=<span class="string">&quot;main&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">                &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">                &lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;footer bg-primary&quot;</span>&gt;</span><br><span class="line">                &lt;/footer&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So lets break this down again. First we need to import <code>React</code>, once we have those we can create the React component ready to export. Now we can create the <code>MainLayout</code> class, for this we are using a JavaScript class and extending <code>React.Component</code>. Using the <code>render()</code> method, we can then layout our scaffolding Html. This is an example of some fairly standard markup, we will just use a bootstrap swatch for styling etc…</p><p>Now we want to add 3 placeholders, a header, body and footer. The syntax for a placeholder component looks like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Placeholder placeholderKey=&#123;<span class="string">&#x27;key&#x27;</span>&#125; placeholder=&#123;<span class="built_in">this</span>.props.placeholder&#125;&gt;</span><br><span class="line">&lt;/Placeholder&gt;</span><br></pre></td></tr></table></figure><p>So lets add that to the markup above and put the placeholder keys in. Make sure you add the import line for the Placeholder component. The final component should look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Placeholder <span class="keyword">from</span> <span class="string">&quot;sitecore.react.placeholders&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLayout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div id=<span class="string">&quot;main-container&quot;</span>&gt;</span><br><span class="line">                &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;navbar navbar-default navbar-static-top container-fluid&quot;</span>&gt;</span><br><span class="line">                    &lt;Placeholder placeholderKey=&#123;<span class="string">&#x27;header&#x27;</span>&#125; placeholder=&#123;<span class="built_in">this</span>.props.placeholder&#125;&gt;</span><br><span class="line">                        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span><br><span class="line">                            &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;navbar-brand&quot;</span>&gt;Sitecore.React: Frontend Site&lt;/h1&gt; </span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/Placeholder&gt;</span><br><span class="line">                &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">                &lt;main role=<span class="string">&quot;main&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">                    &lt;Placeholder placeholderKey=&#123;<span class="string">&#x27;main&#x27;</span>&#125; placeholder=&#123;<span class="built_in">this</span>.props.placeholder&#125;&gt;</span><br><span class="line">                        &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">                    &lt;/Placeholder&gt;</span><br><span class="line">                &lt;/main&gt;</span><br><span class="line"></span><br><span class="line">                &lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;footer bg-primary&quot;</span>&gt;</span><br><span class="line">                    &lt;Placeholder placeholderKey=&#123;<span class="string">&#x27;footer&#x27;</span>&#125; placeholder=&#123;<span class="built_in">this</span>.props.placeholder&#125;&gt;</span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">                        &lt;p&gt;Footer content goes here&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;/Placeholder&gt;</span><br><span class="line">                &lt;/footer&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A couple of things to note here. First all these placeholders are standard placeholders, not dynamic ones. We can make the placeholder a dynamic one by adding the attribute <code>isDynamic=&#123;true&#125;</code> to the component. Also notice that we have this attribute: <code>placeholder=&#123;this.props.placeholder&#125;</code> being sent to each placeholder. This is important - without it the placeholders will not work. When being rendered by Sitecore, a prop is created called <code>placeholder</code> and the contents of that are sent to the component. This property contains the rendered versions of all the components assigned to the matching placeholder key in Sitecore.</p><p>For completeness this is the <code>index.html</code> code that I am working with - it adds in the bootstrap CSS and JavaScript:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sitecore React | Front End Files<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//maxcdn.bootstrapcdn.com/bootswatch/3.3.7/sandstone/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-G3G7OsJCbOk1USkOY4RfeX1z27YaWrZ1YuaQ5tbuawed9IoreRDpWpTkZLXQfPm3&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Custom Fonts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,300italic,400italic,700italic&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/fed.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>One final thing to look at is the contents of the placeholder. When the application is rendered by the front end application, the Placeholder component renders any child elements as the contents of the placeholder. When rendered by Sitecore, this is ignored.</p><h2 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h2><p>Now we have a layout, lets add a page of dummy content for the front end team. This part is only for the front end team. The page components take the place of the Sitecore items and presentation applied to them. In the next few steps we will create more components and start building the page in the same way we would build the Sitecore presentation, but for now lets just get some mark up in there and see it working.</p><p>Create the following folder: <code>src/App/Pages</code>, then in that folder create a page file: <code>Home.jsx</code>. Again, we need to import <code>React</code> and create a class called <code>Home</code>. Here is the sample code. In the render method I have just added some dummy markup:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;HTML Ipsum Presents&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Pellentesque habitant morbi tristique<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. &lt;em&gt;Aenean ultricies mi vitae est.&lt;<span class="regexp">/em&gt; Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, &lt;code&gt;commodo vitae&lt;/</span>code&gt;, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. &lt;a href=<span class="string">&quot;#&quot;</span>&gt;Donec non enim&lt;<span class="regexp">/a&gt; in turpis pulvinar facilisis. Ut felis.&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">            &lt;h2&gt;Header Level <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">            &lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;</span><br><span class="line">            &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">            &lt;blockquote&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus magna. Cras in mi at felis aliquet congue. Ut a est eget ligula molestie gravida. Curabitur massa. Donec eleifend, libero at sagittis mollis, tellus est malesuada tellus, at luctus turpis elit sit amet quam. Vivamus pretium ornare est.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">            &lt;h3&gt;Header Level <span class="number">3</span>&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Putting-it-together"><a href="#Putting-it-together" class="headerlink" title="Putting it together"></a>Putting it together</h2><p>So we have a layout some content for the home page, now we need to setup the <code>React</code> app to use that. If you have been through the first tutorial your <code>fed.js</code> file should look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">global</span>.jQuery = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;bootstrap&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;jquery-ui&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, hashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;react-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;,</span><br><span class="line">app);</span><br></pre></td></tr></table></figure><p>Now we want to remove the <strong>Hello World</strong> part and start using the React router. Here is the sample code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">global</span>.jQuery = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;bootstrap&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;jquery-ui&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter , Switch, Route, Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MainLayout <span class="keyword">from</span> <span class="string">&quot;./views/layout/MainLayout&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;./pages/home&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> (</span><br><span class="line">    &lt;MainLayout&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route exact path=<span class="string">&quot;/&quot;</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">    &lt;/MainLayout&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter &gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter &gt;,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>));</span><br></pre></td></tr></table></figure><p>Notice that we have now imported the <code>MainLayout</code> and <code>Home</code> components that we have just created. Now we can setup the React router. We are just going to use the <code>BrowserRouter</code>, we could also use <code>HashRouter</code> if we wanted too.</p><p>First lets create the main <code>App</code> - the app will render the <code>MainLayout</code> and then use the <code>Switch</code> component to add in the routes for the static site. For now we will just add a route for the home page and tell it to use the <code>Home</code> page component we created earlier. This component will be passed through to the <code>MainLayout</code> as <code>&#123;this.props.children&#125;</code>, that is why we added that to the main body placeholder as thats where we want it rendered in the static site.</p><p>One thing to note here is that I’m using v4 of the React Router, if you are used to using an earlier version, the syntax may seem a little differernt, that is because v4 was a complete rewrite of the router. If you are new to v4 there are some great tutorials out there. Here are a couple:</p><ul><li><a href="https://themeteorchef.com/tutorials/getting-started-with-react-router-v4">Getting Started with React Router v4</a></li><li><a href="https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf">A Simple React Router v4 Tutorial</a></li></ul><p>If you go to your console now and run <code>npm run dev</code>, then navigate to `<a href="http://localhost:8080/">http://localhost:8080/</a> in your browser you should see the page looking something like this:</p><img src="/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/homepage.png" class="" title="Home Page"><p>One of the nice things about webpack is that it is setup for hot reloading. That means that if any changes are made to the source files, the browser will automatically reload the page for you, so stick that browser window on your other monitor and as you make the following updates, you should see the screen update for each one. Nice!</p><h2 id="Creating-Sitecore-Components"><a href="#Creating-Sitecore-Components" class="headerlink" title="Creating Sitecore Components"></a>Creating Sitecore Components</h2><p>So far all we have created is a single page of static content. As it stands we could not use this in a Sitecore site, so lets look at breaking the static markup into Sitecore ready components.</p><p>We will create <code>PageTitle</code> and <code>PageBody</code> components. First thing we need to do is create a folder for our components. The naming of these folders is important. Sitecore.React renderings are just modified Controller renderings, so the folder they live in should match the Controller name we are using for the action code. In Sitecore for this we will create a <code>PageContent</code> controler - so we need to create a <code>PageContent</code> folder under <code>src/Apps/views</code>. Once you have created that, Create 2 files <code>PageTitle.jsx</code> and <code>PageBody.jsx</code>. Again, its important to remeber that the name of the jsx file should really match our action name in the controller, so plan ahead with the naming of components with your front end team.</p><p>I wont bother breaking these down, as we have created a few components now. Here is the sample code for both components:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PageTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;h1&gt;HTML Ipsum Presents&lt;/h1&gt;</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBody</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Pellentesque habitant morbi tristique<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. &lt;em&gt;Aenean ultricies mi vitae est.&lt;<span class="regexp">/em&gt; Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, &lt;code&gt;commodo vitae&lt;/</span>code&gt;, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. &lt;a href=<span class="string">&quot;#&quot;</span>&gt;Donec non enim&lt;<span class="regexp">/a&gt; in turpis pulvinar facilisis. Ut felis.&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h2&gt;Header Level <span class="number">2</span>&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">                &lt;ol&gt;</span><br><span class="line">                &lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;</span><br><span class="line">                &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">                &lt;blockquote&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus magna. Cras in mi at felis aliquet congue. Ut a est eget ligula molestie gravida. Curabitur massa. Donec eleifend, libero at sagittis mollis, tellus est malesuada tellus, at luctus turpis elit sit amet quam. Vivamus pretium ornare est.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">                &lt;h3&gt;Header Level <span class="number">3</span>&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can update the <code>Home</code> page to use those components intead of hard coding the markup into it. So the <code>Home.jsx</code> file now looks like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PageTitle <span class="keyword">from</span> <span class="string">&quot;../views/PageContent/PageTitle&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PageBody <span class="keyword">from</span> <span class="string">&quot;../views/PageContent/PageBody&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;PageTitle /&gt;</span><br><span class="line">          &lt;PageBody /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now your browser should look exactly the same as the screenshot above, but the content is coming from the components instead of the static markup in the <code>Home</code> page file.</p><p>You may be thinking right now - so what, its still static markup and the <code>PageTitle</code> and <code>PageBody</code> components as they stand, still can’t be ported into Sitecore as they are. And you would be right - so the next step will be to add in the structured data part - but for that you will have to wait until the next tutorial…</p><p>By the end of this tutorial, your project folder should look like this:</p><img src="/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/projectfolder.png" class=""><hr><p>This is the second article in a series of tutorials on Sitecore.React:</p><ol><li><a href="/2017/07/04/Sitecore-React-Getting-Started/" title="Sitecore.React - Getting Started - 1. Webpack">Sitecore.React - Getting Started - 1. Webpack</a></li><li><a href="/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/" title="Sitecore.React - Getting Started - 2. Creating Components">Sitecore.React - Getting Started - 2. Creating Components</a></li><li><a href="/2017/07/11/Sitecore-React-Getting-Started-3-Data/" title="Sitecore.React - Getting Started - 3. Data">Sitecore.React - Getting Started - 3. Data</a></li></ol><p>If you have any questions - feel free to hit me up on <a href="https://sitecorechat.slack.com">Sitecore Slack</a> - my user is @GuitarRich!</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore.React - Getting Started - 1. Webpack</title>
      <link>http://www.sitecorenutsbolts.net/2017/07/04/Sitecore-React-Getting-Started/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/07/04/Sitecore-React-Getting-Started/</guid>
      <pubDate>Tue, 04 Jul 2017 13:35:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to the Sitecore.React getting started guide. In this guide we will walk through getting webpack setup and the structure of our si
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to the Sitecore.React getting started guide. In this guide we will walk through getting webpack setup and the structure of our site. Over the next few tutorials we will build the front end site and then bring it all over to Sitecore!</p><p>All the code for this tutorial can be found here: <a href="https://github.com/GuitarRich/sitecore.react.tutorial/tree/getting-started-1">https://github.com/GuitarRich/sitecore.react.tutorial/tree/getting-started-1</a>.</p><h1 id="Getting-Started-with-Webpack"><a href="#Getting-Started-with-Webpack" class="headerlink" title="Getting Started with Webpack"></a>Getting Started with Webpack</h1><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>For this tutorial you need to have the following installed on your machine:</p><ul><li><a href="https://nodejs.org/en/">Node.js</a></li></ul><p>I am also going to assume a level of knowledge on <a href="https://webpack.js.org/">webpack</a> and <a href="https://facebook.github.io/react/">reactjs</a>. If you want to find out more on webpack - take a look at the <a href="https://webpack.js.org/guides/getting-started/">getting started guide here</a>. You can get some good info on <a href="https://facebook.github.io/react/">reactjs</a> <a href="https://facebook.github.io/react/docs/hello-world.html">here</a>.</p><p>There will be features of <a href="http://es6-features.org">ES6</a> used too. You can see an <a href="https://github.com/lukehoban/es6features">overview</a> of ES6 <a href="https://github.com/lukehoban/es6features">here</a>. You will also hear the word <a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them">transpile</a> often - have a read of the article linked if you are unsure <a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them">what a transpiler does</a>.</p><p>This tutorial will be based around how we can create the <a href="https://github.com/GuitarRich/sitecore.react.project">sitecore.react.project</a> sample project. For those of you that have cloned it already, the repo is not fully complete yet. I will do my best to get the serialized items and the readme updated asap.</p><h2 id="Basic-Setup"><a href="#Basic-Setup" class="headerlink" title="Basic Setup"></a>Basic Setup</h2><p>There are a few main components of a Sitecore.React web application. For the purposes of this tutorial we will assume that you are building a full web application with React. If you are just using it for a few components and mixing that up with standard MVC Controller and View renderings, the basics are still the same, just without the main front end application part.</p><p>For the React components and front end build we will use webpack to transpile, bundle and minify the javascript. All the react components will be bundled into a single javascript file. To help with the differences between the front end react site and the Sitecore site we will build 3 versions of the main JavaScript file:</p><ul><li><strong>fed.js</strong>: This is the main source for the react front end application. It will be where we setup react, the FED router and our application that runs outside of Sitecore</li><li><strong>client.js</strong>: This will be the main source for all JavaScript that is used in the Sitecore implementation. It will be referenced in the main layout and downloaded to the users browser. It will contain all the react components along with all the js for the application to run</li><li><strong>server.js</strong>: This is the main source for all server side JavaScript. It will contain all the react components that ReactJS.Net needs to know about. Alot will be identical to the <strong>client.js</strong> file, but this file will exclude any DOM manipulation done outside of react. e.g. event handlers, jQuery DOM manupulation etc… That is only ever in the <strong>client.js</strong> as our server side rendering does not need to know about it.</li></ul><p>The front end react site will also conform to some standards to make the transition of the react files to Sitecore seamless. </p><ul><li>First, we will setup a static data store that the front end team can use to populate the react site with content before it is delivered by Sitecore. The structure of each data model should be defined and agreed up by both front and back end teams.</li><li>The front end team will use a Sitecore placeholders module and the locations of the placeholders should also be agreed upon with input from Sitecore developers.</li></ul><p>It should become clear when going through the tutorials where each part fits in, so lets get on with configuring webpack and creating the obligatory <strong>Hello World</strong> application!</p><h2 id="Setup-Webpack"><a href="#Setup-Webpack" class="headerlink" title="Setup Webpack"></a>Setup Webpack</h2><p>First lets create a directory, initialize npm and install webpack locally. For this tutorial we will assume you start in <code>C:\projects</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir sitecore.react.project &amp;&amp; cs sitecore.react.project</span><br><span class="line">npm init -t</span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><p>Now we want to setup our project structure. The finished project will have the following folder structure:</p><img src="/2017/07/04/Sitecore-React-Getting-Started/01-FolderSetup.png" class="" title="Project Folder Setup"><p>The <code>src/App</code> folder will contain all the React components. <code>src/Feature</code>, <code>src/Foundation</code> and <code>src/Project</code> contain all the helix modules for the project.</p><p>To setup webpack we use the <code>webpack.config.js</code> file in the root of the project. Create this file and we will configure it like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.join(__dirname, <span class="string">&quot;src/app&quot;</span>),</span><br><span class="line">  devtool: debug ? <span class="string">&quot;inline-sourcemap&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    fed: <span class="string">&quot;./fed.js&quot;</span>,</span><br><span class="line">    client: <span class="string">&quot;./client.js&quot;</span>,</span><br><span class="line">    server: <span class="string">&quot;./server.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.json$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;es2015&#x27;</span>, <span class="string">&#x27;stage-0&#x27;</span>],</span><br><span class="line">          plugins: [<span class="string">&#x27;react-html-attrs&#x27;</span>, <span class="string">&#x27;transform-decorators-legacy&#x27;</span>, <span class="string">&#x27;transform-class-properties&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">&quot;/src/app&quot;</span>,</span><br><span class="line">    filename: <span class="string">&quot;[name].min.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: debug ? [] : [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.DedupePlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Lets break that down, most of it is a pretty standard webpack config. The bits to notice are:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  fed: <span class="string">&quot;./fed.js&quot;</span>,</span><br><span class="line">  client: <span class="string">&quot;./client.js&quot;</span>,</span><br><span class="line">  server: <span class="string">&quot;./server.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Here we are defining 3 entry points for webpack. This tells webpack that we are using those 3 files as our source for bundling. We have 3 seperate files for all <code>Sitecore.React</code> projects. These are the same files mentioned earlier: <code>fed.js</code>, <code>client.js</code> and <code>server.js</code>.</p><p>We will create these files in the next step.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: __dirname + <span class="string">&quot;/src/app&quot;</span>,</span><br><span class="line">  filename: <span class="string">&quot;[name].min.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>This section just defines the output files generated by webpack. Using <code>[name]</code> means that it will generate 3 files that match the entry files names with <code>.min.js</code> appended.</p><h2 id="Setting-Up-the-React-Application"><a href="#Setting-Up-the-React-Application" class="headerlink" title="Setting Up the React Application"></a>Setting Up the React Application</h2><p>It’s not the purpose of this tutorial to teach how to write a reactjs application. There are plenty of resources already out there for that. What we will do is use the <a href="https://github.com/GuitarRich/sitecore.react.project">sitecore.react.project</a></p><p>Now we can start with out react application. The application is made up of the main entry point - this sets up the react router and some routes.</p><p>Make sure that your <code>package.json</code> file contains the following devDependencies:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.17.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-plugin-add-module-exports&quot;</span>: <span class="string">&quot;^0.1.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-plugin-react-html-attrs&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-plugin-transform-class-properties&quot;</span>: <span class="string">&quot;^6.3.13&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-plugin-transform-decorators-legacy&quot;</span>: <span class="string">&quot;^1.3.4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-preset-es2015&quot;</span>: <span class="string">&quot;^6.3.13&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-preset-react&quot;</span>: <span class="string">&quot;^6.3.13&quot;</span>,</span><br><span class="line">  <span class="string">&quot;babel-preset-stage-0&quot;</span>: <span class="string">&quot;^6.3.13&quot;</span>,</span><br><span class="line">  <span class="string">&quot;bootstrap&quot;</span>: <span class="string">&quot;^3.3.7&quot;</span>,</span><br><span class="line">  <span class="string">&quot;expose-loader&quot;</span>: <span class="string">&quot;^0.7.3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^3.2.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jquery-ui&quot;</span>: <span class="string">&quot;^1.12.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react&quot;</span>: <span class="string">&quot;^15.6.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react-bootstrap&quot;</span>: <span class="string">&quot;^0.31.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react-dom&quot;</span>: <span class="string">&quot;^15.6.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react-router&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react-router-dom&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^2.5.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then run <code>npm install</code> in the root of your project.</p><p>Next lets create our <code>index.html</code> file. This will contain the main dom elements that our react application will be rendered too. You can add your standard headers, css files etc… In the body make sure we have an app div element and include bundled fed javascript file:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/fed.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now create the file <code>fed.js</code> in the <code>src/App</code> folder. We will import jQuery globally and add in React and the React Router:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">global</span>.jQuery = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;bootstrap&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;jquery-ui&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br></pre></td></tr></table></figure><p>Now we can initialize the react application and render it to the div we created earlier:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;,</span><br><span class="line">app);</span><br></pre></td></tr></table></figure><p>As a final step - lets enable the webpack dev server. Open your <code>package.json</code> file and add the following entry to the <code>scripts</code> section:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --content-base src/App --inline --hot&quot;</span></span><br></pre></td></tr></table></figure><p>Finally we will run <code>npm run dev</code> in the console. This will run the webpack dev server on port 8080. Now in your browser go to <a href="http://localhost:8080/">http://localhost:8080/</a> - if everything has worked you should see the hello world text being rendered by react:</p><img src="/2017/07/04/Sitecore-React-Getting-Started/helloworld.png" class=""><p>In the next tutorial we will start creating React components and learn how to setup placeholders.</p><hr><p>This is the first article in a series of tutorials on Sitecore.React:</p><ol><li><a href="/2017/07/04/Sitecore-React-Getting-Started/" title="Sitecore.React - Getting Started - 1. Webpack">Sitecore.React - Getting Started - 1. Webpack</a></li><li><a href="/2017/07/05/Sitecore-React-Getting-Started-Creating-Components/" title="Sitecore.React - Getting Started - 2. Creating Components">Sitecore.React - Getting Started - 2. Creating Components</a></li><li><a href="/2017/07/11/Sitecore-React-Getting-Started-3-Data/" title="Sitecore.React - Getting Started - 3. Data">Sitecore.React - Getting Started - 3. Data</a></li></ol><p>If you have any questions - feel free to hit me up on <a href="https://sitecorechat.slack.com">Sitecore Slack</a> - my user is @GuitarRich!</p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/07/04/Sitecore-React-Getting-Started/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore.React v2.0 - Released</title>
      <link>http://www.sitecorenutsbolts.net/2017/06/26/Sitecore-React-v2-0-Released/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/06/26/Sitecore-React-v2-0-Released/</guid>
      <pubDate>Tue, 27 Jun 2017 01:36:30 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Finally I have managed to get to launching version 2.0 of my &lt;a href=&quot;https://github.com/GuitarRich/sitecore.react&quot;&gt;Sitecore.React&lt;/a&gt; mo
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Finally I have managed to get to launching version 2.0 of my <a href="https://github.com/GuitarRich/sitecore.react">Sitecore.React</a> module. This post will highlight some of the new bits and also introduce the sample project built with Sitecore.React/. My hope is that this sample project will be to Sitecore.React what Habitat is to Sitecore - an example of how you can use Sitecore.React to build a project using ReactJS and Sitecore.</p><p>These are the updates I presented at the fabulous <a href="http://www.sugcon.eu/">SUCGON</a> in Amsterdam this year. Thanks to all who stopped by to listen to the presentation. There was an issue with the recording of the demo, so I’m going to get a new recording done soon for any that care!</p><p>Over the next few weeks, I will add a series of posts and examples of how the project can be used and how this is one of the options to use ReactJS in a Sitecore environment.</p><p>The Nuget packages have been published. There are now 2 packages:</p><ul><li><a href="https://www.nuget.org/packages/Sitecore.React/">sitecore.react</a> : this is the core binary and can be referenced in any project</li><li><a href="https://www.nuget.org/packages/Sitecore.React.Web/">sitecore.react.web</a> : this just contains the config files for use by the website project</li></ul><h1 id="Sitecore-React-v2-0-What’s-New"><a href="#Sitecore-React-v2-0-What’s-New" class="headerlink" title="Sitecore.React v2.0 - What’s New"></a>Sitecore.React v2.0 - What’s New</h1><h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><p>The big change in v2 is how Sitecore placeholders are handled. In v1 we handled placeholders as part of the prop data.</p><p>For example, a placeholder with a key of <code>main</code> was added like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">this</span>.props.placeholder.main&#125;</span><br></pre></td></tr></table></figure><p>While this works, it means that for the React developer, the component stops there. For them to composite components together to build a functional React site, they would have to note down where the Sitecore placeholder should be added. This kinda kills one of the big benefits of using React, we don’t want the backend developer to have to make any changes to the front end files.</p><p>So we now have a new <code>npm</code> package called <code>[sitecore.react.placeholders](https://www.npmjs.com/package/sitecore.react.placeholders)</code> - now adding a placeholder changes to:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Placeholder placeholderKey=<span class="string">&#x27;main&#x27;</span> isDynamic=&#123;<span class="literal">true</span>&#125; placeholder=&#123;<span class="built_in">this</span>.props.placeholder&#125;&gt;</span><br><span class="line">&lt;/Placeholder&gt;</span><br></pre></td></tr></table></figure><p>As you can see, the placeholder is now a component and can have children. Now we can use this to build a component. Lets break down a typical Page Header component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Placeholder <span class="keyword">from</span> <span class="string">&#x27;sitecore.react.placeholders&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PageHeader = React.createClass(&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;Placeholder placeholderKey=&#123;<span class="string">&#x27;page-header&#x27;</span>&#125; placeholder=&#123;<span class="built_in">this</span>.props.placeholder&#125;&gt;</span><br><span class="line">                    &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">                &lt;/Placeholder&gt;</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = PageHeader;</span><br></pre></td></tr></table></figure><p>This is the jsx code for the component. First we include <code>React</code> and <code>Placeholder</code> - you can do this via the ES6 <code>import</code> statement or by using <code>require</code>.</p><p>Next we are defining the <code>PageHeader</code> class, in the render method we have added markup and a placeholder. Notice that nested in the placeholder is <code>&#123;this.props.children&#125;</code>. This tells the placeholder component to render any child elements of the current react component as child elements of the placeholder when running in Non-Sitecore mode.</p><p>When this component is rendered by Sitecore, the contents of the placeholder will be passed into the component by the Sitecore react module and the placeholder component will render that instead. In following posts I will expand how this happens.</p><p><strong>IMPORTANT</strong> - you may have noticed the <code>placeholder=&#123;this.props.placeholder&#125;</code>. This property must be passed into the placeholder component. It is part of how the component knows if it should render child elements or replace those with Sitecore content.</p><h2 id="JavaScript-Bundling-Parsing"><a href="#JavaScript-Bundling-Parsing" class="headerlink" title="JavaScript Bundling/Parsing"></a>JavaScript Bundling/Parsing</h2><p>Another big change is how we are handling the JavaScript bundling for the project. Previously the jsx components were added into the bundle at runtime and we used ReactJS.Net to transpile the jsx to raw JavaScript. While this worked there were some disadvantages:</p><ul><li><strong>Performance:</strong> Because the transpiling was done on the fly - there was a small performance impact. Also each page could have a different bundle identifier, meaning that you could not take advantage of browser caching for the JavaScript files easily.</li><li><strong>Caching:</strong> Again because the bundled js files did not exist prior to a request, we could not use a CDN to host the files. </li><li><strong>ES6/ReactJS.Net:</strong> While the guys writing ReactJS.net have done an amazing job, not all features of ES6 are supported. The most annoying being modules. With pure ReactJS.Net transpiling you cannot use: <code>import React from &#39;react&#39;;</code> - you are forced to use <code>var React = require(&#39;react&#39;);</code> - its a small thing, but there are other small quirks like that. These are things that a pure ReactJS developer would expect to be in place, and so they shouldn’t have to work around those things.</li></ul><p>So to work around this <code>Sitecore.React</code> now supports pre-bundling of your jsx components. This is most commonly done using <code>[webpack](https://webpack.github.io/)</code> or another front end tool. The advantage of using <code>webpack</code> is that all of your components are created in the bundled JavaScript up front. Then we can use ReactJS.Net to render that pre-built component server side, saving us from having to transpile on the fly before each rendering.</p><p>It also means less differences from how the front end team are working, leading to fewer issues caused by differing processes.</p><p>There will be a section in the tutorials on getting started with webpack.</p><h2 id="Bugs-and-tweaks"><a href="#Bugs-and-tweaks" class="headerlink" title="Bugs and tweaks"></a>Bugs and tweaks</h2><p>There have been a few other tweaks and bugs fixed in the code too. Big thanks go out to <a href="">@Sean Holmesby</a> for many conversations about React and helping out in the early stages with this. Credits also to <a href="https://github.com/altearius">Chris Nielson</a> and <a href="https://github.com/RyanTuckNZ">Ryan Tuck</a> for contributing.</p><p>Also big thanks to <a href="https://twitter.com/LonghornTaco">@Jason Wilkerson</a> for supplying a laptop at SUGCON so I could complete my presentation, as mine decided to die on the flight over!</p><p>Keep an eye out over the next few days and the tutorials will be coming and if you have any questions - please reach out. I’m on the <a href="https://sitecorechat.slack.com">Sitecore Slack Chat</a> most days and go by the name <strong>GuitarRich</strong> - or hit me up on twitter <a href="https://twitter.com/rich_seal">@rich_seal</a>.</p><p>You can find the source to the module here: <a href="https://github.com/GuitarRich/sitecore.react">https://github.com/GuitarRich/sitecore.react</a><br>And the sample project here: <a href="https://github.com/GuitarRich/sitecore.react.project">https://github.com/GuitarRich/sitecore.react.project</a> </p>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/06/26/Sitecore-React-v2-0-Released/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sitecore Stack Exchange vs Slack - What should I use?</title>
      <link>http://www.sitecorenutsbolts.net/2017/06/14/Sitecore-Stack-Exchange-vs-Slack-What-should-I-use/</link>
      <guid>http://www.sitecorenutsbolts.net/2017/06/14/Sitecore-Stack-Exchange-vs-Slack-What-should-I-use/</guid>
      <pubDate>Wed, 14 Jun 2017 15:21:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;If you haven’t heard or signed up for &lt;a href=&quot;https://sitecore.stackexchange.com/&quot;&gt;Sitecore Stack Exchange&lt;/a&gt; or &lt;a href=&quot;http://siteco
        
      
      </description>
      
      <content:encoded><![CDATA[<p>If you haven’t heard or signed up for <a href="https://sitecore.stackexchange.com/">Sitecore Stack Exchange</a> or <a href="http://siteco.re/sitecoreslack">Sitecore Slack Chat</a> - then stop right now, click both of those links and sign up!</p><img src="/2017/06/14/Sitecore-Stack-Exchange-vs-Slack-What-should-I-use/signupnow.jpg" class="" title="Sign Up Now!!!!"><p>There is a vibrant community of amazing Sitecore people hanging out in both area’s that are ready to help anyone with Sitecore problems, questions, troubleshooting or just posting random and weird stuff - <a href="https://twitter.com/mike_i_reynolds">Mike Reynolds</a> &amp; <a href="https://twitter.com/jammykams">@jammykam</a> I’m looking at you here…</p><img src="/2017/06/14/Sitecore-Stack-Exchange-vs-Slack-What-should-I-use/random.jpg" class="" title="Random Crap"><h2 id="So-Why-Both"><a href="#So-Why-Both" class="headerlink" title="So Why Both?"></a>So Why Both?</h2><p>So why do we have 2 communities full of the same people and which one should you use?</p><p>The simple answer is <strong>use both</strong> - they both fulfill 2 different roles for the same community.</p><h2 id="When-Should-I-use-Sitecore-Stack-Exchange"><a href="#When-Should-I-use-Sitecore-Stack-Exchange" class="headerlink" title="When Should I use Sitecore Stack Exchange"></a>When Should I use Sitecore Stack Exchange</h2><p><a href="https://sitecore.stackexchange.com/">Sitecore stack exchange</a> has been running now since mid September 2016 and since that time nearly 2000 users have signed up, asking 2173 questions with a 90% answer rate! That is awesome! And really that is what SSE is for.</p><p>If you have a question about Sitecore, whether it is code, best practice, content editing, configuration, xDB… well you get the idea - if its a specific question, then SSE is the place to ask it. But that is the important bit - SSE is designed for <strong>SPECIFIC</strong> questions that can be answered, they can be as complex as you like, but they must be answerable without a lot of conversation. SSE is a Question and Answer site - not a conversation/troubleshooting site.</p><h3 id="Who-is-SSE-For"><a href="#Who-is-SSE-For" class="headerlink" title="Who is SSE For?"></a>Who is SSE For?</h3><p>Really who is SSE for? Initially you may think its for <em>you</em> - <em>you</em> ask a quesiton and get an answer and move on. <strong>WRONG</strong> - that is only half the reason - the biggest reason that SSE exists is that someone else might have the exact same problem tha you have!  Because you have asked a beautifully deatailed question and got an awesome answer - when a new developer asks google the answer, your SSE post is the highest ranked result - or at least in the top 10 - this is the <strong>REAL</strong> reason for SSE. For others to learn from problems that we have solved! SO….</p><h4 id="Good-SSE-Examples"><a href="#Good-SSE-Examples" class="headerlink" title="Good SSE Examples"></a>Good SSE Examples</h4><p>Some good examples of this are these:</p><ul><li><a href="https://sitecore.stackexchange.com/questions/221/how-do-you-setup-a-404-and-500-error-page-for-missing-files-and-media-items">How do you setup 404 and 500 error page for missing files and media items?</a> - this is a great question that spawned a number of equaly great answers. There was a lot of detail in the question, some clarifying comments were added, but it was <em>answerable</em> without diagnosis</li><li><a href="https://sitecore.stackexchange.com/questions/1/how-can-i-programmatically-add-a-rendering-to-all-of-my-content-items">How can I programmatically add a rendering to all of my content items?</a> - again, another clear quesiton with nice detail that didn’t need much conversation to be able to answer</li></ul><p>What if the question is a bit more vague tho? What about questions where the answer is opinionated? Well that is fine too - as long as the question is… you guessed it… <em>answerable</em></p><ul><li><a href="https://sitecore.stackexchange.com/questions/490/best-approach-for-dependency-injection-in-sitecore-8-2">What is the best approach for dependency injection in Sitecore 8.2</a> - with this question, the answers are going to be opinions based on experience, but its a great question for SSE</li></ul><p>And these questions don’t have to be about coding or even directly about using the CMS - as long as its related to the Sitecore CMS, Sitecore or a supporting module and is … say it with me… <em>answerable</em> - Please ASK!</p><ul><li><a href="https://sitecore.stackexchange.com/questions/1737/how-can-i-get-started-learning-sitecore">How can I get started learning Sitecore?</a></li><li><a href="https://sitecore.stackexchange.com/questions/2294/how-to-be-recommended-to-be-a-sitecore-mvp">How to be Recommended to be a Sitecore MVP</a></li></ul><h4 id="Bad-SSE-Examples"><a href="#Bad-SSE-Examples" class="headerlink" title="Bad SSE Examples"></a>Bad SSE Examples</h4><p>So we’ve looked at what you <em>can</em> ask, what about some examples of questions that don’t belong on SSE. In this I’m not going to link to any actual questions, or copy them here - this is not a place to put others down! But there are times when questions just don’t fit the format of SSE. Let’s look at some examples of this:</p><ul><li><strong>What are the best practices when using Sitecore/xDB/Solr/other feature</strong> - So why is this bad, put simply because it is not <em>answerable</em> (there is that word again) in a single post - this is where the line between an opinionated post like “what is the best way to do xxxxx” is different from “What is the best practice for xxxxxx” - there is a subtile difference here. If you want to know the best practice for something spcific like setting up DI, configuring Glass Mapper etc.. that is fine. But when you ask for best practices on something vague or broad like Sitecore, Solr etc… - that can’t be answered in a single post - so its not a format for SSE. This is a question for Slack - it involves a conversation, a thread, many people involved.</li><li><strong>I just installed xxx module and now I’m getting a runtime error xxxxxxxx”</strong> - Initially, this might seem like the perfect question for SSE - and it might well be, <strong>BUT</strong> if to answer your question there needs to be some diagnosis or a lot of questions, it might be best to ask this on Slack first and then if it is something that might be helpful to others, add it to SSE with an answer once you have one. This is a more tricky line to work out - sometimes, its worth asking the question and then moving to chat or SSE to diagnose the issue. <strong>REMEMBER</strong> - always add the answer when you have one to SSE otherwise its of no use to anyone.</li><li><strong>XXX feature is not working - how do I fix</strong> - really… unless you have spent at least 2-3 days googling/diagnosing yourself you shouldn’t be asking this anyawy - but also, same reasons as above - ask in a format that works for this - Slack or the <a href="http://community.sitecore.net">Sitecore Community Forums</a>.</li><li><strong>Will Akshay Sura be my friend</strong> - if you are asking this on SSE, then the answer is <strong>NO</strong></li></ul><h4 id="Rember-SSE-is-not-for-Conversations-its-for-Questions-with-direct-Answers"><a href="#Rember-SSE-is-not-for-Conversations-its-for-Questions-with-direct-Answers" class="headerlink" title="Rember - SSE is not for Conversations - its for Questions with direct Answers!!!!"></a>Rember - SSE is not for Conversations - its for Questions with direct Answers!!!!</h4><h2 id="Sitecore-Slack-Chat"><a href="#Sitecore-Slack-Chat" class="headerlink" title="Sitecore Slack Chat"></a>Sitecore Slack Chat</h2><p>So now we have looked at SSE - where does that leave the Sitecore Slack Chat channels?? </p><p>Really for all the stuff listed under what not to ask in SSE and more! Do you have a problem with Glass Mapper that needs some diagnosis? Look for the <strong>#glass</strong> channel in Slack - what about that SOLR problem that you have spent the last week on? <strong>#solr</strong> is the place to be. Are you just deparate to be Akshay Sura’s best friend - well don’t ask here, cos he hates us all!</p><p>Also - do you want direct access to some of the best and brightest minds in the Sitecore world? Just look at some of the people that are regularly on the Sitecore Slack Chat:</p><ul><li><a href="https://twitter.com/stephenpope">@stephenpope</a> - the genius behind the new Publishing Service</li><li><a href="https://twitter.com/mike_i_reynolds">@sitecorejunkie</a> - just the genius!</li><li><a href="https://twitter.com/mikeedwards83">@mikeedwards</a> and <a href="https://twitter.com/cardinal252">@cardinal252</a> - the minds behind Glass Mapper</li><li><a href="https://twitter.com/LonghornTaco">@longhorntaco</a> - The man behind the book <a href="https://www.amazon.com/Professional-Sitecore-Development-Solutions-Practices/dp/1484222911/ref=sr_1_1?ie=UTF8&amp;qid=1497413467&amp;sr=8-1&amp;keywords=sitecore+8">Sitecore 8 Development</a> - Why haven’t you bought this yet?</li><li><a href="https://twitter.com/akshaysura13">@akshaysura</a> - The man who wants to be your friend and inventor of the onsie flap! - also has amazing dance moves!</li></ul><p>I really could go on forever with this list… There are 183 Sitecore MVP’s regularly active on the channels. If you are not a member of the Sitecore Slack Chat - you are really missing out.</p><p>There are so many great sub channels - some really good ones are the <strong>#blogfeed</strong> - any new blogs are listed here, <strong>#stackexchangefeed</strong> - lists all new questions on SSE, <strong>#helix-habitat</strong> - anything you want to know about Sitecores new guidelines are here!</p><p>I think the my favourite thing about the Sitecore Slack Channel is the number of Sitecore employees that are regularly active members, and so willing to help us all out with questions we might have about the platform or implementation. </p><h2 id="When-To-Use-Both"><a href="#When-To-Use-Both" class="headerlink" title="When To Use Both"></a>When To Use Both</h2><p>I’ve mentioned it already in this post, but sometimes you will want to use both Slack <em>and</em> SSE for your question. Right now the Slack chat is a fluid, living thing! Because we are on the free version of Slack there is a message limit of 10,000 messages - it only takes a few days for this limit to be hit, so anything 4-5 days old on Slack is probably gone, never to be seen again.</p><p>SO - if you chat about something on Slack and get an answer that others might benefit from - <em>PLEASE</em> - ask the question on SSE and post the answer too - then it is there for all time, to benefit future users of Sitecore - <em>OR</em> alternatively - write a blog post about it. Or even do both (just make sure you link to SSE if you do that). The key here is to make sure that others in the community benefit from your experience and we all create better implementations for our clients!</p><h2 id="TL-DR-So-where-does-that-leave-me"><a href="#TL-DR-So-where-does-that-leave-me" class="headerlink" title="TL\DR; So where does that leave me?"></a>TL\DR; So where does that leave me?</h2><p>It leaves you with the knowledge that if you are not active on <strong>BOTH</strong> channels, then you are not using the resources available to you properly!</p><p>Both SSE and Slack are essential resources for <strong>ALL</strong> Sitecore developers, and anyone that says otherwise is lying to you!</p><p><em>Please</em> - be a part of our amazing community. Come and join the fun. Most importantly - make sure you are using the <strong>RIGHT</strong> resource for your need - don’t just ask something on SSE when it is best suited for Slack, and don’t leave something on Slack that is good for the rest of the community to know - make sure it is publicly available in a format that will not expire, like SSE.</p><h2 id="WAIT-What-about-http-community-sitecore-net"><a href="#WAIT-What-about-http-community-sitecore-net" class="headerlink" title="WAIT! What about http://community.sitecore.net?"></a>WAIT! What about <a href="http://community.sitecore.net">http://community.sitecore.net</a>?</h2><img src="/2017/06/14/Sitecore-Stack-Exchange-vs-Slack-What-should-I-use/elephantroom.jpg" class=""><p>The Sitecore hosted community site is a great in between of Slack and SSE - its a forum, so designed for having conversations and getting answers that way - its also more permanent than Slack, so it may be a good place to chat if you don’t want the conversation to disappear after a few days.</p><ul><li><strong>Slack</strong> - get answers fast, chat about random stuff, keep up with the community etc…</li><li><strong>Community Forums</strong> - Not as immediate as Slack, but a permanent record of your conversation. Officially supported by Sitecore</li><li><strong>SSE</strong> - For questions and answers, <strong>NOT</strong> for conversations, debugging etc…</li></ul><p>Happy coding!</p><ul><li>Richard</li></ul>]]></content:encoded>
      
      <comments>http://www.sitecorenutsbolts.net/2017/06/14/Sitecore-Stack-Exchange-vs-Slack-What-should-I-use/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
